{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AK Parti Gençlik Kolları İstişare Kampı Yönetim Sistemi\n\n## Overview\n\nThis is a web-based management system for the AK Party Youth Branches Consultation Camp. The application is designed to facilitate question and answer management with role-based access control for administrators and moderators.\n\n## User Preferences\n\n- **Communication Language**: Turkish - All communications should be in Turkish language\n- **Communication Style**: Simple, everyday language without technical jargon\n- **User Request Date**: January 28, 2025\n- **Specific Request**: User explicitly asked to communicate in Turkish with simple, non-technical language\n\n## Recent Changes\n\n### January 29, 2025\n- **Feedback Management Enhanced**: Added feedback deletion functionality for genelsekreterlik role\n- **Table Management Enhanced**: Updated table management to show user details and enable editing\n- **Export Formats Added**: Implemented Excel (.xlsx) and TXT export alongside existing CSV\n- **JSON Import Documentation**: Created comprehensive documentation with example format\n- **User Deletion Bug Fix**: Added cascade delete constraints to foreign keys to properly delete users with their associated data\n- **Confirmed**: Moderators can see responses from genelsekreterlik to their feedback\n- **Schema Updates**: Added updatedAt field to tables table and cascade delete constraints to all foreign keys\n\n### January 28, 2025\n- **Role Renaming Completed**: Successfully renamed all user roles throughout the entire codebase:\n  - \"adminpro\" → \"genelsekreterlik\" (General Secretariat)\n  - \"admin\" → \"genelbaskan\" (General President)\n  - \"moderator\" remains as \"moderator\"\n- Updated all database references, API endpoints, UI components, and role checks\n- Updated documentation to reflect new Turkish organizational structure\n- **Fixed remaining role references**: \n  - Fixed user management page access for genelsekreterlik role (was checking for 'adminpro')\n  - Updated /api/answers route permissions to use new role names\n  - Fixed UserModal component to use new role types\n  - Updated comments in schema.ts to reference genelsekreterlik instead of adminpro\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for development and production builds\n- **Routing**: Wouter for client-side routing\n- **UI Framework**: Shadcn/UI components with Radix UI primitives\n- **Styling**: Tailwind CSS with custom AK Party brand colors\n- **State Management**: TanStack Query (React Query) for server state management\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Authentication**: JWT tokens with bcrypt password hashing\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Database Provider**: Neon serverless PostgreSQL\n- **Session Management**: Stateless JWT-based authentication\n\n### Key Design Decisions\n- **Monorepo Structure**: Client and server code in the same repository with shared schema\n- **TypeScript First**: Full TypeScript implementation across frontend, backend, and shared code\n- **Component-Based UI**: Reusable UI components following atomic design principles\n- **Role-Based Access**: Three distinct user roles with different permissions and UI experiences\n\n## Key Components\n\n### User Roles and Permissions\n1. **Genel Sekreterlik (genelsekreterlik)**: Full system access including user management, question management, feedback viewing, and system logs\n2. **Genel Başkan (genelbaskan)**: Can view reports and system logs, access all table responses\n3. **Moderatör (moderator)**: Table-specific access to assigned questions, can create/edit answers and send feedback\n\n### Core Entities\n- **Users**: Authentication and role management\n- **Tables**: Organization units for moderators\n- **Questions**: Can be general (all tables) or specific (assigned tables)\n- **Answers**: Multiple answers per question per table\n- **Feedback**: Moderator feedback to administrators\n- **Activity Logs**: System activity tracking\n\n### Authentication System\n- TC Kimlik Numarası (Turkish ID) based login\n- JWT token authentication with 24-hour expiration\n- Role-based route protection\n- Activity logging for all user actions\n\n## Data Flow\n\n### Authentication Flow\n1. User enters TC number and password\n2. Server validates credentials and returns JWT token\n3. Token stored in localStorage for subsequent requests\n4. Middleware validates token on protected routes\n\n### Question Management Flow\n1. Genel Sekreterlik creates questions (general or table-specific)\n2. Questions distributed to appropriate moderators\n3. Moderators provide multiple answers per question\n4. Administrators can view all responses and generate reports\n\n### Feedback System\n1. Moderators can send feedback about questions\n2. Feedback includes context about unclear questions or missing information\n3. AdminPro users can view and manage feedback\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL database connection\n- **@tanstack/react-query**: Server state management\n- **@radix-ui/***: Accessible UI component primitives\n- **drizzle-orm**: Type-safe SQL query builder\n- **jwt/bcrypt**: Authentication and password security\n- **zod**: Runtime type validation\n\n### Development Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Type checking and compilation\n- **Tailwind CSS**: Utility-first CSS framework\n- **ESBuild**: Production bundling\n\n## Deployment Strategy\n\n### Build Process\n- Frontend: Vite builds React app to `dist/public`\n- Backend: ESBuild bundles server code to `dist/index.js`\n- Single deployment artifact with static file serving\n\n### Environment Configuration\n- `DATABASE_URL`: PostgreSQL connection string (required)\n- `JWT_SECRET`: JWT signing secret (fallback provided)\n- `NODE_ENV`: Environment mode (development/production)\n\n### Database Setup\n- Drizzle Kit for schema migrations\n- PostgreSQL with UUID primary keys\n- Enum types for roles and question types\n- JSONB for flexible data storage (table assignments)\n\n### Special Features\n- **Splash Screen**: 3-second animated loading screen on first visit\n- **Mobile Responsive**: Tailwind CSS responsive design\n- **Turkish Localization**: All UI text in Turkish\n- **Brand Colors**: Custom AK Party yellow and blue theme\n- **Activity Logging**: Comprehensive user action tracking\n- **Role-Based Navigation**: Dynamic sidebar based on user permissions\n\nThe application follows a clean separation of concerns with shared TypeScript types between client and server, ensuring type safety across the full stack.","size_bytes":6694},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"docs/json-import-format.md":{"content":"# JSON Kullanıcı İçe Aktarma Formatı\n\nBu dokümantasyon, AK Parti Gençlik Kolları İstişare Kampı Yönetim Sistemi için kullanıcı içe aktarma JSON formatını açıklar.\n\n## JSON Dosya Yapısı\n\nJSON dosyası aşağıdaki yapıda olmalıdır:\n\n```json\n{\n  \"users\": [\n    {\n      \"tcNumber\": \"12345678901\",\n      \"password\": \"sifre123\",\n      \"firstName\": \"Ahmet\",\n      \"lastName\": \"Yılmaz\",\n      \"role\": \"moderator\",\n      \"tableNumber\": 1\n    },\n    {\n      \"tcNumber\": \"98765432109\",\n      \"password\": \"sifre456\",\n      \"firstName\": \"Mehmet\",\n      \"lastName\": \"Demir\",\n      \"role\": \"genelbaskan\"\n    }\n  ]\n}\n```\n\n## Alan Açıklamaları\n\n### Zorunlu Alanlar\n\n- **tcNumber** (string): 11 haneli T.C. Kimlik Numarası\n- **password** (string): Kullanıcı şifresi (minimum 6 karakter)\n- **firstName** (string): Kullanıcının adı\n- **lastName** (string): Kullanıcının soyadı\n- **role** (string): Kullanıcı rolü. Değerler:\n  - `\"genelsekreterlik\"` - Genel Sekreterlik (tüm yetkilere sahip)\n  - `\"genelbaskan\"` - Genel Başkan (raporlama ve görüntüleme yetkisi)\n  - `\"moderator\"` - Moderatör (masa bazlı soru cevaplama yetkisi)\n\n### Opsiyonel Alanlar\n\n- **tableNumber** (number): Masa numarası (sadece moderatör rolü için gerekli)\n\n## Örnek Dosya\n\nÖrneki `attached_assets/ornek_kullanici_import.json` dosyasında bulabilirsiniz:\n\n```json\n{\n  \"users\": [\n    {\n      \"tcNumber\": \"11111111111\",\n      \"password\": \"demo123\",\n      \"firstName\": \"Ali\",\n      \"lastName\": \"Kaya\",\n      \"role\": \"genelsekreterlik\"\n    },\n    {\n      \"tcNumber\": \"22222222222\",\n      \"password\": \"demo123\",\n      \"firstName\": \"Veli\",\n      \"lastName\": \"Öz\",\n      \"role\": \"genelbaskan\"\n    },\n    {\n      \"tcNumber\": \"33333333333\",\n      \"password\": \"demo123\",\n      \"firstName\": \"Ayşe\",\n      \"lastName\": \"Yıldız\",\n      \"role\": \"moderator\",\n      \"tableNumber\": 1\n    },\n    {\n      \"tcNumber\": \"44444444444\",\n      \"password\": \"demo123\",\n      \"firstName\": \"Fatma\",\n      \"lastName\": \"Demir\",\n      \"role\": \"moderator\",\n      \"tableNumber\": 2\n    }\n  ]\n}\n```\n\n## İçe Aktarma İşlemi\n\n1. **Dosya Hazırlama**: Yukarıdaki formata uygun bir JSON dosyası hazırlayın\n2. **Kullanıcı Yönetimi Sayfası**: Sistemde \"Kullanıcı Yönetimi\" sayfasına gidin\n3. **JSON İçe Aktar**: Sayfanın sağ üst köşesindeki \"JSON İçe Aktar\" butonuna tıklayın\n4. **Dosya Seçimi**: Hazırladığınız JSON dosyasını seçin\n5. **Otomatik İşlem**: Sistem otomatik olarak:\n   - Kullanıcıları oluşturur\n   - Şifreleri güvenli bir şekilde hashler\n   - Moderatörler için belirtilen masaları oluşturur (eğer yoksa)\n   - İşlem sonucunu bildirir\n\n## Önemli Notlar\n\n- T.C. Kimlik Numaraları benzersiz olmalıdır\n- Aynı T.C. Kimlik Numarası ile birden fazla kullanıcı oluşturulamaz\n- Moderatör rolü için masa numarası zorunludur\n- Şifreler en az 6 karakter olmalıdır\n- Masa numaraları pozitif tam sayı olmalıdır\n- Sistem, belirtilen masa numarası yoksa otomatik olarak oluşturur\n\n## Hata Durumları\n\n- **Geçersiz JSON formatı**: Dosya düzgün JSON formatında değilse\n- **Eksik zorunlu alan**: Yukarıda belirtilen zorunlu alanlardan biri eksikse\n- **Geçersiz rol**: Belirtilen rol değerlerinden biri değilse\n- **Tekrar eden T.C. Kimlik No**: Aynı T.C. Kimlik Numarası sistemde zaten varsa\n- **Geçersiz T.C. Kimlik No**: 11 haneli değilse\n\n## Başarılı İçe Aktarma\n\nİşlem başarılı olduğunda sistem:\n- Kaç kullanıcının başarıyla içe aktarıldığını\n- Kaç masanın oluşturulduğunu (varsa)\n- bildirir.\n\n## Destek\n\nSorunlarla karşılaşırsanız, JSON dosyanızın formatını kontrol edin ve yukarıdaki kurallara uyduğundan emin olun.","size_bytes":3712},"server/auth.ts":{"content":"import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt';\nimport type { Request, Response, NextFunction } from 'express';\nimport type { User } from '@shared/schema';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'fallback-secret-key';\n\nexport interface AuthenticatedRequest extends Request {\n  user?: User;\n}\n\nexport function generateToken(user: User): string {\n  return jwt.sign(\n    { \n      id: user.id, \n      tcNumber: user.tcNumber, \n      role: user.role,\n      tableNumber: user.tableNumber \n    },\n    JWT_SECRET,\n    { expiresIn: '24h' }\n  );\n}\n\nexport function verifyToken(token: string): any {\n  try {\n    return jwt.verify(token, JWT_SECRET);\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12);\n}\n\nexport async function comparePassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\nexport const requireAuth = async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  try {\n    const authHeader = req.headers.authorization;\n    const token = authHeader && authHeader.split(' ')[1];\n\n    if (!token) {\n      return res.status(401).json({ message: 'Access token required' });\n    }\n\n    const decoded = verifyToken(token);\n    if (!decoded) {\n      return res.status(401).json({ message: 'Invalid token' });\n    }\n\n    // In a real app, you might want to fetch fresh user data here\n    req.user = {\n      id: decoded.id,\n      tcNumber: decoded.tcNumber,\n      role: decoded.role,\n      tableNumber: decoded.tableNumber,\n    } as User;\n\n    next();\n  } catch (error) {\n    res.status(401).json({ message: 'Unauthorized' });\n  }\n};\n\nexport const requireRole = (roles: string[]) => {\n  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    if (!req.user || !roles.includes(req.user.role)) {\n      return res.status(403).json({ message: 'Insufficient permissions' });\n    }\n    next();\n  };\n};\n","size_bytes":1997},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/initUsers.ts":{"content":"import { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\n\nasync function initializeUsers() {\n  try {\n    console.log(\"Kullanıcılar oluşturuluyor...\");\n    \n    // Genel Sekreterlik hesabı - Gülbahar Öztürk\n    const hashedPassword1 = await bcrypt.hash(\"47704699208\", 10);\n    await db.insert(users).values({\n      tcNumber: \"47704699208\",\n      password: hashedPassword1,\n      firstName: \"Gülbahar\",\n      lastName: \"Öztürk\",\n      role: \"genelsekreterlik\",\n      tableNumber: null\n    }).onConflictDoNothing();\n    \n    // Genel Başkan hesabı - Yusuf İbiş\n    const hashedPassword2 = await bcrypt.hash(\"46480904230\", 10);\n    await db.insert(users).values({\n      tcNumber: \"46480904230\",\n      password: hashedPassword2,\n      firstName: \"Yusuf\",\n      lastName: \"İbiş\",\n      role: \"genelbaskan\",\n      tableNumber: null\n    }).onConflictDoNothing();\n    \n    console.log(\"Kullanıcılar başarıyla oluşturuldu!\");\n  } catch (error) {\n    console.error(\"Kullanıcı oluşturma hatası:\", error);\n  }\n}\n\n// Eğer bu dosya doğrudan çalıştırılıyorsa\ninitializeUsers().then(() => process.exit(0));\n\nexport { initializeUsers };","size_bytes":1190},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { requireAuth, requireRole, generateToken, comparePassword, hashPassword, type AuthenticatedRequest } from \"./auth\";\nimport { insertUserSchema, insertQuestionSchema, insertAnswerSchema, insertFeedbackSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport multer from \"multer\";\nimport * as XLSX from \"xlsx\";\n\n// Login schema\nconst loginSchema = z.object({\n  tcNumber: z.string().length(11, \"T.C. Kimlik Numarası 11 haneli olmalıdır\"),\n  password: z.string().min(1, \"Şifre gereklidir\"),\n});\n\n// Configure multer for file uploads\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype === 'application/json') {\n      cb(null, true);\n    } else {\n      cb(new Error('Sadece JSON dosyaları kabul edilir'));\n    }\n  }\n});\n\n// User import schema\nconst userImportSchema = z.object({\n  isim: z.string().min(1, \"İsim zorunludur\"),\n  soyisim: z.string().min(1, \"Soyisim zorunludur\"),\n  tc: z.string().length(11, \"T.C. Kimlik Numarası 11 haneli olmalıdır\"),\n  sifre: z.string().min(1, \"Şifre zorunludur\"),\n  rol: z.enum(['genelsekreterlik', 'genelbaskan', 'moderator'], {\n    errorMap: () => ({ message: \"Geçersiz rol\" })\n  }),\n  masaNo: z.number().optional(),\n  masaAdi: z.string().optional(),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { tcNumber, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByTcNumber(tcNumber);\n      if (!user || !user.isActive) {\n        return res.status(401).json({ message: 'Geçersiz kimlik bilgileri' });\n      }\n\n      const isValidPassword = await comparePassword(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: 'Geçersiz kimlik bilgileri' });\n      }\n\n      // Update last login\n      await storage.updateUserLastLogin(user.id);\n\n      // Log activity\n      await storage.logActivity({\n        userId: user.id,\n        action: 'login',\n        details: 'Kullanıcı sisteme giriş yaptı',\n        ipAddress: req.ip,\n      });\n\n      const token = generateToken(user);\n      \n      res.json({ \n        token, \n        user: {\n          id: user.id,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          tableNumber: user.tableNumber,\n        }\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(400).json({ message: 'Giriş bilgileri geçersiz' });\n    }\n  });\n\n  app.post('/api/auth/logout', requireAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (req.user) {\n        await storage.logActivity({\n          userId: req.user.id,\n          action: 'logout',\n          details: 'Kullanıcı sistemden çıkış yaptı',\n          ipAddress: req.ip,\n        });\n      }\n      res.json({ message: 'Çıkış başarılı' });\n    } catch (error) {\n      res.status(500).json({ message: 'Çıkış hatası' });\n    }\n  });\n\n  app.get('/api/auth/me', requireAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const user = await storage.getUser(req.user!.id);\n      if (!user) {\n        return res.status(404).json({ message: 'Kullanıcı bulunamadı' });\n      }\n      \n      res.json({\n        id: user.id,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        tableNumber: user.tableNumber,\n      });\n    } catch (error) {\n      res.status(500).json({ message: 'Kullanıcı bilgileri alınamadı' });\n    }\n  });\n\n  // Dashboard routes\n  app.get('/api/dashboard/stats', requireAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: 'İstatistikler alınamadı' });\n    }\n  });\n\n  // User management routes (genelsekreterlik only)\n  app.get('/api/users', requireAuth, requireRole(['genelsekreterlik']), async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: 'Kullanıcılar alınamadı' });\n    }\n  });\n\n  app.post('/api/users', requireAuth, requireRole(['genelsekreterlik']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Hash password\n      userData.password = await hashPassword(userData.password);\n      \n      const user = await storage.createUser(userData);\n      \n      // Log activity\n      await storage.logActivity({\n        userId: req.user!.id,\n        action: 'create_user',\n        details: `Yeni kullanıcı oluşturuldu: ${user.firstName} ${user.lastName}`,\n        metadata: { createdUserId: user.id },\n        ipAddress: req.ip,\n      });\n      \n      res.status(201).json(user);\n    } catch (error) {\n      console.error('Create user error:', error);\n      res.status(400).json({ message: 'Kullanıcı oluşturulamadı' });\n    }\n  });\n\n  app.put('/api/users/:id', requireAuth, requireRole(['genelsekreterlik']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const updates = insertUserSchema.partial().parse(req.body);\n      \n      // Hash password if provided\n      if (updates.password) {\n        updates.password = await hashPassword(updates.password);\n      }\n      \n      const user = await storage.updateUser(id, updates);\n      \n      // Log activity\n      await storage.logActivity({\n        userId: req.user!.id,\n        action: 'edit_user',\n        details: `Kullanıcı güncellendi: ${user.firstName} ${user.lastName}`,\n        metadata: { editedUserId: user.id },\n        ipAddress: req.ip,\n      });\n      \n      res.json(user);\n    } catch (error) {\n      console.error('Update user error:', error);\n      res.status(400).json({ message: 'Kullanıcı güncellenemedi' });\n    }\n  });\n\n  app.delete('/api/users/:id', requireAuth, requireRole(['genelsekreterlik']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const { deleteFeedback, deleteAnswers } = req.query;\n      \n      const user = await storage.getUser(id);\n      if (!user) {\n        return res.status(404).json({ message: 'Kullanıcı bulunamadı' });\n      }\n      \n      // Delete associated data if requested\n      if (deleteFeedback === 'true') {\n        await storage.deleteFeedbackByUser(id);\n      }\n      \n      if (deleteAnswers === 'true') {\n        await storage.deleteAnswersByUser(id);\n      }\n      \n      await storage.deleteUser(id);\n      \n      // Log activity\n      await storage.logActivity({\n        userId: req.user!.id,\n        action: 'delete_user',\n        details: `Kullanıcı silindi: ${user.firstName} ${user.lastName}`,\n        metadata: { \n          deletedUserId: user.id,\n          deletedFeedback: deleteFeedback === 'true',\n          deletedAnswers: deleteAnswers === 'true'\n        },\n        ipAddress: req.ip,\n      });\n      \n      res.json({ message: 'Kullanıcı başarıyla silindi' });\n    } catch (error) {\n      console.error('Delete user error:', error);\n      res.status(500).json({ message: 'Kullanıcı silinemedi' });\n    }\n  });\n\n  app.post('/api/users/import', requireAuth, requireRole(['genelsekreterlik']), upload.single('file'), async (req: AuthenticatedRequest, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'Dosya gereklidir' });\n      }\n\n      const jsonData = JSON.parse(req.file.buffer.toString());\n      \n      // Validate array\n      if (!Array.isArray(jsonData)) {\n        return res.status(400).json({ message: 'JSON dosyası bir dizi olmalıdır' });\n      }\n\n      let imported = 0;\n      let tablesCreated = 0;\n      const errors: string[] = [];\n      const createdTables = new Set<number>();\n\n      for (let i = 0; i < jsonData.length; i++) {\n        try {\n          const userData = userImportSchema.parse(jsonData[i]);\n          \n          // Check if user already exists\n          const existingUser = await storage.getUserByTcNumber(userData.tc);\n          if (existingUser) {\n            errors.push(`Satır ${i + 1}: TC ${userData.tc} zaten kayıtlı`);\n            continue;\n          }\n\n          // If table number is provided, check if table exists\n          if (userData.masaNo && !createdTables.has(userData.masaNo)) {\n            const existingTable = await storage.getTableByNumber(userData.masaNo);\n            if (!existingTable) {\n              // Create table\n              const tableName = userData.masaAdi || `Masa ${userData.masaNo}`;\n              await storage.createTable({\n                number: userData.masaNo,\n                name: tableName,\n                isActive: true,\n              });\n              createdTables.add(userData.masaNo);\n              tablesCreated++;\n            }\n          }\n\n          // Create user\n          const hashedPassword = await hashPassword(userData.sifre);\n          await storage.createUser({\n            firstName: userData.isim,\n            lastName: userData.soyisim,\n            tcNumber: userData.tc,\n            password: hashedPassword,\n            role: userData.rol,\n            tableNumber: userData.masaNo || null,\n            isActive: true,\n          });\n          \n          imported++;\n        } catch (error) {\n          if (error instanceof z.ZodError) {\n            errors.push(`Satır ${i + 1}: ${error.errors.map(e => e.message).join(', ')}`);\n          } else {\n            errors.push(`Satır ${i + 1}: Bilinmeyen hata`);\n          }\n        }\n      }\n\n      // Log activity\n      await storage.logActivity({\n        userId: req.user!.id,\n        action: 'import_users',\n        details: `${imported} kullanıcı içe aktarıldı${tablesCreated > 0 ? `, ${tablesCreated} masa oluşturuldu` : ''}`,\n        metadata: { imported, tablesCreated, errors: errors.length },\n        ipAddress: req.ip,\n      });\n\n      res.json({\n        imported,\n        tablesCreated,\n        total: jsonData.length,\n        errors: errors.length > 0 ? errors : undefined,\n      });\n    } catch (error) {\n      console.error('Import users error:', error);\n      res.status(400).json({ message: 'İçe aktarma başarısız' });\n    }\n  });\n\n  // Question management routes\n  app.get('/api/questions', requireAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      let questions;\n      \n      if (req.user!.role === 'moderator' && req.user!.tableNumber) {\n        // Moderators only see questions assigned to their table\n        questions = await storage.getQuestionsForTable(req.user!.tableNumber);\n      } else {\n        // Admins see all questions\n        questions = await storage.getAllQuestions();\n      }\n      \n      res.json(questions);\n    } catch (error) {\n      res.status(500).json({ message: 'Sorular alınamadı' });\n    }\n  });\n\n  app.post('/api/questions', requireAuth, requireRole(['genelsekreterlik']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const questionData = insertQuestionSchema.parse({\n        ...req.body,\n        createdBy: req.user!.id,\n      });\n      \n      const question = await storage.createQuestion(questionData);\n      \n      // Log activity\n      await storage.logActivity({\n        userId: req.user!.id,\n        action: 'create_question',\n        details: `Yeni soru oluşturuldu: ${question.text.substring(0, 50)}...`,\n        metadata: { questionId: question.id },\n        ipAddress: req.ip,\n      });\n      \n      res.status(201).json(question);\n    } catch (error) {\n      console.error('Create question error:', error);\n      res.status(400).json({ message: 'Soru oluşturulamadı' });\n    }\n  });\n\n  app.put('/api/questions/:id', requireAuth, requireRole(['genelsekreterlik']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const updates = insertQuestionSchema.partial().parse(req.body);\n      \n      const question = await storage.updateQuestion(id, updates);\n      \n      // Log activity\n      await storage.logActivity({\n        userId: req.user!.id,\n        action: 'edit_question',\n        details: `Soru güncellendi: ${question.text.substring(0, 50)}...`,\n        metadata: { questionId: question.id },\n        ipAddress: req.ip,\n      });\n      \n      res.json(question);\n    } catch (error) {\n      res.status(400).json({ message: 'Soru güncellenemedi' });\n    }\n  });\n\n  app.delete('/api/questions/:id', requireAuth, requireRole(['genelsekreterlik']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      \n      const question = await storage.getQuestion(id);\n      if (!question) {\n        return res.status(404).json({ message: 'Soru bulunamadı' });\n      }\n      \n      await storage.deleteQuestion(id);\n      \n      // Log activity\n      await storage.logActivity({\n        userId: req.user!.id,\n        action: 'delete_question',\n        details: `Soru silindi: ${question.text.substring(0, 50)}...`,\n        metadata: { questionId: id },\n        ipAddress: req.ip,\n      });\n      \n      res.json({ message: 'Soru silindi' });\n    } catch (error) {\n      res.status(500).json({ message: 'Soru silinemedi' });\n    }\n  });\n\n  // Answer routes\n  app.get('/api/questions/:questionId/answers', requireAuth, async (req, res) => {\n    try {\n      const { questionId } = req.params;\n      const answers = await storage.getAnswersForQuestion(questionId);\n      res.json(answers);\n    } catch (error) {\n      res.status(500).json({ message: 'Cevaplar alınamadı' });\n    }\n  });\n\n  app.get('/api/answers/my', requireAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const answers = await storage.getAnswersForUser(req.user!.id);\n      res.json(answers);\n    } catch (error) {\n      res.status(500).json({ message: 'Cevaplar alınamadı' });\n    }\n  });\n\n  app.get('/api/answers', requireAuth, requireRole(['genelbaskan', 'genelsekreterlik']), async (req, res) => {\n    try {\n      const answers = await storage.getAllAnswers();\n      res.json(answers);\n    } catch (error) {\n      res.status(500).json({ message: 'Cevaplar alınamadı' });\n    }\n  });\n\n  app.post('/api/answers', requireAuth, requireRole(['moderator']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const answerData = insertAnswerSchema.parse({\n        ...req.body,\n        userId: req.user!.id,\n        tableNumber: req.user!.tableNumber,\n      });\n      \n      const answer = await storage.createAnswer(answerData);\n      \n      // Log activity\n      await storage.logActivity({\n        userId: req.user!.id,\n        action: 'create_answer',\n        details: `Yeni cevap eklendi`,\n        metadata: { questionId: answer.questionId, answerId: answer.id },\n        ipAddress: req.ip,\n      });\n      \n      res.status(201).json(answer);\n    } catch (error) {\n      console.error('Create answer error:', error);\n      res.status(400).json({ message: 'Cevap eklenemedi' });\n    }\n  });\n\n  app.put('/api/answers/:id', requireAuth, requireRole(['moderator']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const updates = insertAnswerSchema.partial().parse(req.body);\n      \n      const answer = await storage.updateAnswer(id, updates);\n      \n      // Log activity\n      await storage.logActivity({\n        userId: req.user!.id,\n        action: 'edit_answer',\n        details: `Cevap güncellendi`,\n        metadata: { questionId: answer.questionId, answerId: answer.id },\n        ipAddress: req.ip,\n      });\n      \n      res.json(answer);\n    } catch (error) {\n      res.status(400).json({ message: 'Cevap güncellenemedi' });\n    }\n  });\n\n  app.delete('/api/answers/:id', requireAuth, requireRole(['moderator']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      \n      await storage.deleteAnswer(id);\n      \n      // Log activity\n      await storage.logActivity({\n        userId: req.user!.id,\n        action: 'delete_answer',\n        details: `Cevap silindi`,\n        metadata: { answerId: id },\n        ipAddress: req.ip,\n      });\n      \n      res.json({ message: 'Cevap silindi' });\n    } catch (error) {\n      res.status(500).json({ message: 'Cevap silinemedi' });\n    }\n  });\n\n  // Feedback routes\n  app.get('/api/feedback', requireAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      let feedbackItems;\n      \n      if (req.user!.role === 'genelsekreterlik') {\n        // Genelsekreterlik can see all feedback\n        feedbackItems = await storage.getAllFeedback();\n      } else if (req.user!.role === 'moderator') {\n        // Moderators can only see their own feedback\n        feedbackItems = await storage.getFeedbackForUser(req.user!.id);\n      } else {\n        return res.status(403).json({ message: 'Bu sayfaya erişim yetkiniz yok' });\n      }\n      \n      res.json(feedbackItems);\n    } catch (error) {\n      res.status(500).json({ message: 'Geri bildirimler alınamadı' });\n    }\n  });\n\n  app.post('/api/feedback', requireAuth, requireRole(['moderator']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const feedbackData = insertFeedbackSchema.parse({\n        ...req.body,\n        userId: req.user!.id,\n      });\n      \n      const feedbackItem = await storage.createFeedback(feedbackData);\n      \n      // Log activity\n      await storage.logActivity({\n        userId: req.user!.id,\n        action: 'send_feedback',\n        details: `Geri bildirim gönderildi`,\n        metadata: { questionId: feedbackData.questionId, feedbackId: feedbackItem.id },\n        ipAddress: req.ip,\n      });\n      \n      res.status(201).json(feedbackItem);\n    } catch (error) {\n      res.status(400).json({ message: 'Geri bildirim gönderilemedi' });\n    }\n  });\n\n  app.put('/api/feedback/:id/read', requireAuth, requireRole(['genelsekreterlik']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.markFeedbackAsRead(id);\n      res.json({ message: 'Geri bildirim okundu olarak işaretlendi' });\n    } catch (error) {\n      res.status(500).json({ message: 'İşlem gerçekleştirilemedi' });\n    }\n  });\n\n  app.put('/api/feedback/:id/resolve', requireAuth, requireRole(['genelsekreterlik']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.markFeedbackAsResolved(id);\n      res.json({ message: 'Geri bildirim çözüldü olarak işaretlendi' });\n    } catch (error) {\n      res.status(500).json({ message: 'İşlem gerçekleştirilemedi' });\n    }\n  });\n\n  app.put('/api/feedback/:id/respond', requireAuth, requireRole(['genelsekreterlik']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const { response } = req.body;\n      \n      if (!response || response.trim() === '') {\n        return res.status(400).json({ message: 'Yanıt metni gereklidir' });\n      }\n      \n      await storage.respondToFeedback(id, response, req.user!.id);\n      \n      res.json({ message: 'Geri bildirime yanıt verildi' });\n    } catch (error) {\n      res.status(500).json({ message: 'Yanıt gönderilemedi' });\n    }\n  });\n\n  app.delete('/api/feedback/:id', requireAuth, requireRole(['genelsekreterlik']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      \n      const feedback = await storage.getFeedback(id);\n      if (!feedback) {\n        return res.status(404).json({ message: 'Geri bildirim bulunamadı' });\n      }\n      \n      await storage.deleteFeedback(id);\n      \n      // Log activity\n      await storage.logActivity({\n        userId: req.user!.id,\n        action: 'delete_answer', // Using delete_answer since there's no delete_feedback action\n        details: `Geri bildirim silindi`,\n        metadata: { feedbackId: id },\n        ipAddress: req.ip,\n      });\n      \n      res.json({ message: 'Geri bildirim başarıyla silindi' });\n    } catch (error) {\n      console.error('Delete feedback error:', error);\n      res.status(500).json({ message: 'Geri bildirim silinemedi' });\n    }\n  });\n\n  // Activity logs\n  app.get('/api/logs', requireAuth, async (req: AuthenticatedRequest, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 100;\n      \n      // Moderators can only see their own logs\n      if (req.user!.role === 'moderator') {\n        const logs = await storage.getActivityLogsForUser(req.user!.id, limit);\n        res.json(logs);\n      } else {\n        // General Secretary and General President can see all logs\n        const logs = await storage.getActivityLogs(limit);\n        res.json(logs);\n      }\n    } catch (error) {\n      res.status(500).json({ message: 'Loglar alınamadı' });\n    }\n  });\n\n  // Tables\n  app.get('/api/tables', requireAuth, async (req, res) => {\n    try {\n      const tablesList = await storage.getAllTablesWithDetails();\n      res.json(tablesList);\n    } catch (error) {\n      res.status(500).json({ message: 'Masalar alınamadı' });\n    }\n  });\n\n  // Table management routes (genelsekreterlik only)\n  app.post('/api/tables', requireAuth, requireRole(['genelsekreterlik']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { number, name } = req.body;\n      \n      // Validate input\n      if (!number || number <= 0) {\n        return res.status(400).json({ message: 'Geçerli bir masa numarası giriniz' });\n      }\n\n      const table = await storage.createTable({ number, name });\n      \n      // Log activity\n      await storage.logActivity({\n        userId: req.user!.id,\n        action: 'create_user', // We don't have create_table action in the enum, using create_user\n        details: `Yeni masa oluşturuldu: Masa ${number}`,\n        metadata: { tableId: table.id },\n        ipAddress: req.ip,\n      });\n      \n      res.status(201).json(table);\n    } catch (error: any) {\n      console.error('Error creating table:', error);\n      if (error.code === '23505') {\n        res.status(400).json({ message: 'Bu masa numarası zaten mevcut' });\n      } else {\n        res.status(500).json({ message: 'Masa oluşturulurken hata oluştu' });\n      }\n    }\n  });\n\n  app.put('/api/tables/:id', requireAuth, requireRole(['genelsekreterlik']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const { name } = req.body;\n      \n      if (!name || name.trim() === '') {\n        return res.status(400).json({ message: 'Masa adı gereklidir' });\n      }\n      \n      const table = await storage.updateTable(id, { name });\n      \n      // Log activity\n      await storage.logActivity({\n        userId: req.user!.id,\n        action: 'edit_user', // Using edit_user since there's no edit_table action\n        details: `Masa güncellendi: ${table.name}`,\n        metadata: { tableId: table.id },\n        ipAddress: req.ip,\n      });\n      \n      res.json(table);\n    } catch (error) {\n      console.error('Update table error:', error);\n      res.status(500).json({ message: 'Masa güncellenemedi' });\n    }\n  });\n\n  app.delete('/api/tables/:id', requireAuth, requireRole(['genelsekreterlik']), async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const table = await storage.getTable(id);\n      \n      if (!table) {\n        return res.status(404).json({ message: 'Masa bulunamadı' });\n      }\n      \n      await storage.deleteTable(id);\n      \n      // Log activity\n      await storage.logActivity({\n        userId: req.user!.id,\n        action: 'delete_user', // We don't have delete_table action in the enum, using delete_user\n        details: `Masa silindi: Masa ${table.number}`,\n        metadata: { tableId: id },\n        ipAddress: req.ip,\n      });\n      \n      res.status(200).json({ message: 'Masa başarıyla silindi' });\n    } catch (error) {\n      console.error('Error deleting table:', error);\n      res.status(500).json({ message: 'Masa silinirken hata oluştu' });\n    }\n  });\n\n  // Export routes\n  app.get('/api/export/answers', requireAuth, requireRole(['genelbaskan', 'genelsekreterlik']), async (req, res) => {\n    try {\n      const format = req.query.format as string || 'csv';\n      const answers = await storage.getAllAnswers();\n      \n      if (format === 'csv') {\n        const csv = [\n          ['Soru', 'Masa No', 'Cevap', 'Cevaplayan', 'Tarih'].join(','),\n          ...answers.map(answer => [\n            `\"${answer.questionText || 'Bilinmeyen'}\"`,\n            answer.tableNumber,\n            `\"${answer.text.replace(/\"/g, '\"\"')}\"`,\n            `\"${answer.userName || 'Bilinmeyen'}\"`,\n            new Date(answer.createdAt).toLocaleString('tr-TR')\n          ].join(','))\n        ].join('\\n');\n        \n        res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"cevaplar.csv\"');\n        res.send('\\ufeff' + csv); // UTF-8 BOM for Excel\n      } else if (format === 'xlsx') {\n        // Create workbook\n        const wb = XLSX.utils.book_new();\n        \n        // Create worksheet data\n        const wsData = [\n          ['Soru', 'Masa No', 'Cevap', 'Cevaplayan', 'Tarih'],\n          ...answers.map(answer => [\n            answer.questionText || 'Bilinmeyen',\n            answer.tableNumber || '',\n            answer.text,\n            answer.userName || 'Bilinmeyen',\n            new Date(answer.createdAt).toLocaleString('tr-TR')\n          ])\n        ];\n        \n        // Create worksheet\n        const ws = XLSX.utils.aoa_to_sheet(wsData);\n        \n        // Set column widths\n        ws['!cols'] = [\n          { width: 50 }, // Soru\n          { width: 10 }, // Masa No\n          { width: 80 }, // Cevap\n          { width: 20 }, // Cevaplayan\n          { width: 20 }  // Tarih\n        ];\n        \n        // Add worksheet to workbook\n        XLSX.utils.book_append_sheet(wb, ws, 'Cevaplar');\n        \n        // Generate buffer\n        const buffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });\n        \n        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"cevaplar.xlsx\"');\n        res.send(buffer);\n      } else if (format === 'txt') {\n        const txt = answers.map(answer => \n          `SORU: ${answer.questionText || 'Bilinmeyen'}\\n` +\n          `MASA NO: ${answer.tableNumber || '-'}\\n` +\n          `CEVAP: ${answer.text}\\n` +\n          `CEVAPLAYAN: ${answer.userName || 'Bilinmeyen'}\\n` +\n          `TARİH: ${new Date(answer.createdAt).toLocaleString('tr-TR')}\\n` +\n          `${'='.repeat(80)}\\n`\n        ).join('\\n');\n        \n        res.setHeader('Content-Type', 'text/plain; charset=utf-8');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"cevaplar.txt\"');\n        res.send('\\ufeff' + txt); // UTF-8 BOM\n      } else {\n        res.status(400).json({ message: 'Desteklenmeyen format' });\n      }\n    } catch (error) {\n      res.status(500).json({ message: 'Export başarısız' });\n    }\n  });\n\n  app.get('/api/export/users', requireAuth, requireRole(['genelsekreterlik']), async (req, res) => {\n    try {\n      const format = req.query.format as string || 'csv';\n      const users = await storage.getAllUsers();\n      \n      if (format === 'csv') {\n        const csv = [\n          ['Ad', 'Soyad', 'TC No', 'Rol', 'Masa No', 'Son Giriş', 'Cevap Sayısı'].join(','),\n          ...users.map(user => [\n            `\"${user.firstName}\"`,\n            `\"${user.lastName}\"`,\n            user.tcNumber,\n            user.role,\n            user.tableNumber || '',\n            user.lastLogin ? new Date(user.lastLogin).toLocaleString('tr-TR') : 'Yok',\n            user.answersCount || 0\n          ].join(','))\n        ].join('\\n');\n        \n        res.setHeader('Content-Type', 'text/csv; charset=utf-8');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"kullanicilar.csv\"');\n        res.send('\\ufeff' + csv); // UTF-8 BOM for Excel\n      } else {\n        res.status(400).json({ message: 'Desteklenmeyen format' });\n      }\n    } catch (error) {\n      res.status(500).json({ message: 'Export başarısız' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":28462},"server/storage.ts":{"content":"import {\n  users,\n  tables,\n  questions,\n  answers,\n  feedback,\n  activityLogs,\n  type User,\n  type InsertUser,\n  type Table,\n  type InsertTable,\n  type Question,\n  type InsertQuestion,\n  type Answer,\n  type InsertAnswer,\n  type Feedback,\n  type InsertFeedback,\n  type ActivityLog,\n  type InsertActivityLog,\n  type UserWithStats,\n  type QuestionWithStats,\n  type AnswerWithDetails,\n  type FeedbackWithDetails,\n  type ActivityLogWithUser,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, or, desc, asc, sql, count, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByTcNumber(tcNumber: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User>;\n  updateUserLastLogin(id: string): Promise<void>;\n  getAllUsers(): Promise<UserWithStats[]>;\n  deleteUser(id: string): Promise<void>;\n  deleteAnswersByUser(userId: string): Promise<void>;\n  deleteFeedbackByUser(userId: string): Promise<void>;\n  \n  // Table operations\n  createTable(table: InsertTable): Promise<Table>;\n  getAllTables(): Promise<Table[]>;\n  getTable(id: string): Promise<Table | undefined>;\n  deleteTable(id: string): Promise<void>;\n  updateTable(id: string, updates: Partial<InsertTable>): Promise<Table>;\n  getTableByNumber(number: number): Promise<Table | undefined>;\n  getAllTablesWithStats(): Promise<any[]>;\n  \n  // Question operations\n  createQuestion(question: InsertQuestion): Promise<Question>;\n  updateQuestion(id: string, updates: Partial<InsertQuestion>): Promise<Question>;\n  deleteQuestion(id: string): Promise<void>;\n  getAllQuestions(): Promise<QuestionWithStats[]>;\n  getQuestionsForTable(tableNumber: number): Promise<QuestionWithStats[]>;\n  getQuestion(id: string): Promise<Question | undefined>;\n  \n  // Answer operations\n  createAnswer(answer: InsertAnswer): Promise<Answer>;\n  updateAnswer(id: string, updates: Partial<InsertAnswer>): Promise<Answer>;\n  deleteAnswer(id: string): Promise<void>;\n  getAnswersForQuestion(questionId: string): Promise<AnswerWithDetails[]>;\n  getAnswersForUser(userId: string): Promise<AnswerWithDetails[]>;\n  getAllAnswers(): Promise<AnswerWithDetails[]>;\n  \n  // Feedback operations\n  createFeedback(feedback: InsertFeedback): Promise<Feedback>;\n  getAllFeedback(): Promise<FeedbackWithDetails[]>;\n  markFeedbackAsRead(id: string): Promise<void>;\n  markFeedbackAsResolved(id: string): Promise<void>;\n  getFeedback(id: string): Promise<Feedback | undefined>;\n  deleteFeedback(id: string): Promise<void>;\n  respondToFeedback(id: string, response: string, respondedBy: string): Promise<void>;\n  getFeedbackForUser(userId: string): Promise<FeedbackWithDetails[]>;\n  \n  // Activity log operations\n  logActivity(log: InsertActivityLog): Promise<ActivityLog>;\n  getActivityLogs(limit?: number): Promise<ActivityLog[]>;\n  getActivityLogsForUser(userId: string, limit?: number): Promise<ActivityLog[]>;\n  \n  // Dashboard stats\n  getDashboardStats(): Promise<{\n    totalTables: number;\n    totalQuestions: number;\n    totalAnswers: number;\n    pendingAnswers: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByTcNumber(tcNumber: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.tcNumber, tcNumber));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserLastLogin(id: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ lastLogin: new Date() })\n      .where(eq(users.id, id));\n  }\n\n  async getAllUsers(): Promise<UserWithStats[]> {\n    const result = await db\n      .select({\n        id: users.id,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        tcNumber: users.tcNumber,\n        password: users.password,\n        role: users.role,\n        tableNumber: users.tableNumber,\n        isActive: users.isActive,\n        lastLogin: users.lastLogin,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n        answersCount: count(answers.id),\n      })\n      .from(users)\n      .leftJoin(answers, eq(users.id, answers.userId))\n      .groupBy(users.id)\n      .orderBy(users.createdAt);\n    \n    return result;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async deleteAnswersByUser(userId: string): Promise<void> {\n    await db.delete(answers).where(eq(answers.userId, userId));\n  }\n\n  async deleteFeedbackByUser(userId: string): Promise<void> {\n    await db.delete(feedback).where(eq(feedback.userId, userId));\n  }\n\n  // Table operations\n  async createTable(insertTable: InsertTable): Promise<Table> {\n    const [table] = await db\n      .insert(tables)\n      .values(insertTable)\n      .returning();\n    return table;\n  }\n\n  async getAllTables(): Promise<Table[]> {\n    return db.select().from(tables).where(eq(tables.isActive, true)).orderBy(tables.number);\n  }\n\n  async getAllTablesWithStats(): Promise<(Table & { userCount: number })[]> {\n    const tablesWithUsers = await db\n      .select({\n        id: tables.id,\n        number: tables.number,\n        name: tables.name,\n        isActive: tables.isActive,\n        createdAt: tables.createdAt,\n        userCount: count(users.id),\n      })\n      .from(tables)\n      .leftJoin(users, and(eq(users.tableNumber, tables.number), eq(users.isActive, true)))\n      .where(eq(tables.isActive, true))\n      .groupBy(tables.id, tables.number, tables.name, tables.isActive, tables.createdAt)\n      .orderBy(tables.number);\n\n    return tablesWithUsers;\n  }\n\n  async getAllTablesWithDetails(): Promise<(Table & { userCount: number, users: Array<{ id: string; firstName: string; lastName: string; role: string }> })[]> {\n    // First get all tables\n    const allTables = await db\n      .select()\n      .from(tables)\n      .where(eq(tables.isActive, true))\n      .orderBy(tables.number);\n\n    // Then get users grouped by table\n    const tableUsers = await db\n      .select({\n        tableNumber: users.tableNumber,\n        id: users.id,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        role: users.role,\n      })\n      .from(users)\n      .where(eq(users.isActive, true));\n\n    // Combine the data\n    const tablesWithDetails = allTables.map(table => {\n      const tableUserList = tableUsers.filter(u => u.tableNumber === table.number);\n      return {\n        ...table,\n        userCount: tableUserList.length,\n        users: tableUserList,\n      };\n    });\n\n    return tablesWithDetails;\n  }\n\n  async getTable(id: string): Promise<Table | undefined> {\n    const [table] = await db.select().from(tables).where(eq(tables.id, id));\n    return table || undefined;\n  }\n\n  async getTableByNumber(number: number): Promise<Table | undefined> {\n    const [table] = await db.select().from(tables).where(eq(tables.number, number));\n    return table || undefined;\n  }\n\n  async deleteTable(id: string): Promise<void> {\n    await db\n      .update(tables)\n      .set({ isActive: false })\n      .where(eq(tables.id, id));\n  }\n\n  async updateTable(id: string, updates: Partial<InsertTable>): Promise<Table> {\n    const [table] = await db\n      .update(tables)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(tables.id, id))\n      .returning();\n    return table;\n  }\n\n  // Question operations\n  async createQuestion(insertQuestion: InsertQuestion): Promise<Question> {\n    const [question] = await db\n      .insert(questions)\n      .values(insertQuestion)\n      .returning();\n    return question;\n  }\n\n  async updateQuestion(id: string, updates: Partial<InsertQuestion>): Promise<Question> {\n    const [question] = await db\n      .update(questions)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(questions.id, id))\n      .returning();\n    return question;\n  }\n\n  async deleteQuestion(id: string): Promise<void> {\n    await db\n      .update(questions)\n      .set({ isActive: false })\n      .where(eq(questions.id, id));\n  }\n\n  async getAllQuestions(): Promise<QuestionWithStats[]> {\n    const result = await db\n      .select({\n        id: questions.id,\n        text: questions.text,\n        type: questions.type,\n        assignedTables: questions.assignedTables,\n        createdBy: questions.createdBy,\n        isActive: questions.isActive,\n        createdAt: questions.createdAt,\n        updatedAt: questions.updatedAt,\n        answersCount: count(answers.id),\n        createdByName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n      })\n      .from(questions)\n      .leftJoin(answers, eq(questions.id, answers.questionId))\n      .leftJoin(users, eq(questions.createdBy, users.id))\n      .where(eq(questions.isActive, true))\n      .groupBy(questions.id, users.firstName, users.lastName)\n      .orderBy(desc(questions.createdAt));\n    \n    return result;\n  }\n\n  async getQuestionsForTable(tableNumber: number): Promise<QuestionWithStats[]> {\n    const result = await db\n      .select({\n        id: questions.id,\n        text: questions.text,\n        type: questions.type,\n        assignedTables: questions.assignedTables,\n        createdBy: questions.createdBy,\n        isActive: questions.isActive,\n        createdAt: questions.createdAt,\n        updatedAt: questions.updatedAt,\n        answersCount: count(answers.id),\n        createdByName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n      })\n      .from(questions)\n      .leftJoin(answers, and(eq(questions.id, answers.questionId), eq(answers.tableNumber, tableNumber)))\n      .leftJoin(users, eq(questions.createdBy, users.id))\n      .where(\n        and(\n          eq(questions.isActive, true),\n          or(\n            eq(questions.type, 'general'),\n            sql`${questions.assignedTables}::jsonb ? ${tableNumber.toString()}`\n          )\n        )\n      )\n      .groupBy(questions.id, users.firstName, users.lastName)\n      .orderBy(desc(questions.createdAt));\n    \n    return result;\n  }\n\n  async getQuestion(id: string): Promise<Question | undefined> {\n    const [question] = await db.select().from(questions).where(eq(questions.id, id));\n    return question || undefined;\n  }\n\n  // Answer operations\n  async createAnswer(insertAnswer: InsertAnswer): Promise<Answer> {\n    const [answer] = await db\n      .insert(answers)\n      .values(insertAnswer)\n      .returning();\n    return answer;\n  }\n\n  async updateAnswer(id: string, updates: Partial<InsertAnswer>): Promise<Answer> {\n    const [answer] = await db\n      .update(answers)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(answers.id, id))\n      .returning();\n    return answer;\n  }\n\n  async deleteAnswer(id: string): Promise<void> {\n    await db.delete(answers).where(eq(answers.id, id));\n  }\n\n  async getAnswersForQuestion(questionId: string): Promise<AnswerWithDetails[]> {\n    const result = await db\n      .select({\n        id: answers.id,\n        questionId: answers.questionId,\n        userId: answers.userId,\n        tableNumber: answers.tableNumber,\n        text: answers.text,\n        orderIndex: answers.orderIndex,\n        createdAt: answers.createdAt,\n        updatedAt: answers.updatedAt,\n        questionText: questions.text,\n        userName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n      })\n      .from(answers)\n      .leftJoin(questions, eq(answers.questionId, questions.id))\n      .leftJoin(users, eq(answers.userId, users.id))\n      .where(eq(answers.questionId, questionId))\n      .orderBy(answers.tableNumber, answers.orderIndex);\n    \n    return result;\n  }\n\n  async getAnswersForUser(userId: string): Promise<AnswerWithDetails[]> {\n    const result = await db\n      .select({\n        id: answers.id,\n        questionId: answers.questionId,\n        userId: answers.userId,\n        tableNumber: answers.tableNumber,\n        text: answers.text,\n        orderIndex: answers.orderIndex,\n        createdAt: answers.createdAt,\n        updatedAt: answers.updatedAt,\n        questionText: questions.text,\n        userName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n      })\n      .from(answers)\n      .leftJoin(questions, eq(answers.questionId, questions.id))\n      .leftJoin(users, eq(answers.userId, users.id))\n      .where(eq(answers.userId, userId))\n      .orderBy(desc(answers.createdAt));\n    \n    return result;\n  }\n\n  async getAllAnswers(): Promise<AnswerWithDetails[]> {\n    const result = await db\n      .select({\n        id: answers.id,\n        questionId: answers.questionId,\n        userId: answers.userId,\n        tableNumber: answers.tableNumber,\n        text: answers.text,\n        orderIndex: answers.orderIndex,\n        createdAt: answers.createdAt,\n        updatedAt: answers.updatedAt,\n        questionText: questions.text,\n        userName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n      })\n      .from(answers)\n      .leftJoin(questions, eq(answers.questionId, questions.id))\n      .leftJoin(users, eq(answers.userId, users.id))\n      .orderBy(desc(answers.createdAt));\n    \n    return result;\n  }\n\n  // Feedback operations\n  async createFeedback(insertFeedback: InsertFeedback): Promise<Feedback> {\n    const [feedbackItem] = await db\n      .insert(feedback)\n      .values(insertFeedback)\n      .returning();\n    return feedbackItem;\n  }\n\n  async getAllFeedback(): Promise<FeedbackWithDetails[]> {\n    const result = await db\n      .select({\n        id: feedback.id,\n        questionId: feedback.questionId,\n        userId: feedback.userId,\n        message: feedback.message,\n        response: feedback.response,\n        respondedBy: feedback.respondedBy,\n        respondedAt: feedback.respondedAt,\n        isRead: feedback.isRead,\n        isResolved: feedback.isResolved,\n        createdAt: feedback.createdAt,\n        questionText: questions.text,\n        userName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n        userTableNumber: users.tableNumber,\n        respondedByName: sql<string>`resp.first_name || ' ' || resp.last_name`,\n      })\n      .from(feedback)\n      .leftJoin(questions, eq(feedback.questionId, questions.id))\n      .leftJoin(users, eq(feedback.userId, users.id))\n      .leftJoin(sql`users AS resp`, eq(feedback.respondedBy, sql`resp.id`))\n      .orderBy(desc(feedback.createdAt));\n    \n    return result;\n  }\n\n  async markFeedbackAsRead(id: string): Promise<void> {\n    await db\n      .update(feedback)\n      .set({ isRead: true })\n      .where(eq(feedback.id, id));\n  }\n\n  async markFeedbackAsResolved(id: string): Promise<void> {\n    await db\n      .update(feedback)\n      .set({ isResolved: true })\n      .where(eq(feedback.id, id));\n  }\n\n  async getFeedbackForUser(userId: string): Promise<FeedbackWithDetails[]> {\n    const result = await db\n      .select({\n        id: feedback.id,\n        questionId: feedback.questionId,\n        userId: feedback.userId,\n        message: feedback.message,\n        response: feedback.response,\n        respondedBy: feedback.respondedBy,\n        respondedAt: feedback.respondedAt,\n        isRead: feedback.isRead,\n        isResolved: feedback.isResolved,\n        createdAt: feedback.createdAt,\n        questionText: questions.text,\n        userName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n        userTableNumber: users.tableNumber,\n        respondedByName: sql<string>`resp.first_name || ' ' || resp.last_name`,\n      })\n      .from(feedback)\n      .leftJoin(questions, eq(feedback.questionId, questions.id))\n      .leftJoin(users, eq(feedback.userId, users.id))\n      .leftJoin(sql`users AS resp`, eq(feedback.respondedBy, sql`resp.id`))\n      .where(eq(feedback.userId, userId))\n      .orderBy(desc(feedback.createdAt));\n    \n    return result;\n  }\n\n  async respondToFeedback(id: string, response: string, respondedBy: string): Promise<void> {\n    await db\n      .update(feedback)\n      .set({ \n        response, \n        respondedBy,\n        respondedAt: new Date(),\n        isRead: true \n      })\n      .where(eq(feedback.id, id));\n  }\n\n  async getFeedback(id: string): Promise<Feedback | undefined> {\n    const [feedbackItem] = await db.select().from(feedback).where(eq(feedback.id, id));\n    return feedbackItem || undefined;\n  }\n\n  async deleteFeedback(id: string): Promise<void> {\n    await db.delete(feedback).where(eq(feedback.id, id));\n  }\n\n  // Activity log operations\n  async logActivity(insertLog: InsertActivityLog): Promise<ActivityLog> {\n    const [log] = await db\n      .insert(activityLogs)\n      .values(insertLog)\n      .returning();\n    return log;\n  }\n\n  async getActivityLogs(limit: number = 100): Promise<ActivityLogWithUser[]> {\n    return db\n      .select({\n        id: activityLogs.id,\n        userId: activityLogs.userId,\n        action: activityLogs.action,\n        details: activityLogs.details,\n        metadata: activityLogs.metadata,\n        ipAddress: activityLogs.ipAddress,\n        createdAt: activityLogs.createdAt,\n        userFirstName: users.firstName,\n        userLastName: users.lastName,\n        userTcNumber: users.tcNumber,\n      })\n      .from(activityLogs)\n      .leftJoin(users, eq(activityLogs.userId, users.id))\n      .orderBy(desc(activityLogs.createdAt))\n      .limit(limit);\n  }\n  \n  async getActivityLogsForUser(userId: string, limit: number = 100): Promise<ActivityLogWithUser[]> {\n    return db\n      .select({\n        id: activityLogs.id,\n        userId: activityLogs.userId,\n        action: activityLogs.action,\n        details: activityLogs.details,\n        metadata: activityLogs.metadata,\n        ipAddress: activityLogs.ipAddress,\n        createdAt: activityLogs.createdAt,\n        userFirstName: users.firstName,\n        userLastName: users.lastName,\n        userTcNumber: users.tcNumber,\n      })\n      .from(activityLogs)\n      .leftJoin(users, eq(activityLogs.userId, users.id))\n      .where(eq(activityLogs.userId, userId))\n      .orderBy(desc(activityLogs.createdAt))\n      .limit(limit);\n  }\n\n  // Dashboard stats\n  async getDashboardStats(): Promise<{\n    totalTables: number;\n    totalQuestions: number;\n    totalAnswers: number;\n    pendingAnswers: number;\n  }> {\n    const [tablesCount] = await db\n      .select({ count: count(tables.id) })\n      .from(tables)\n      .where(eq(tables.isActive, true));\n\n    const [questionsCount] = await db\n      .select({ count: count(questions.id) })\n      .from(questions)\n      .where(eq(questions.isActive, true));\n\n    const [answersCount] = await db\n      .select({ count: count(answers.id) })\n      .from(answers);\n\n    // Calculate pending answers (questions without answers from tables they're assigned to)\n    const allQuestionsWithAnswers = await db\n      .select({\n        questionId: questions.id,\n        type: questions.type,\n        assignedTables: questions.assignedTables,\n        answeredTables: sql<number[]>`COALESCE(array_agg(DISTINCT ${answers.tableNumber}) FILTER (WHERE ${answers.tableNumber} IS NOT NULL), '{}')`,\n      })\n      .from(questions)\n      .leftJoin(answers, eq(questions.id, answers.questionId))\n      .where(eq(questions.isActive, true))\n      .groupBy(questions.id);\n\n    let pendingCount = 0;\n    for (const q of allQuestionsWithAnswers) {\n      if (q.type === 'general') {\n        const activeTables = await db.select({ number: tables.number }).from(tables).where(eq(tables.isActive, true));\n        const totalTables = activeTables.length;\n        const answeredTables = q.answeredTables.length;\n        pendingCount += totalTables - answeredTables;\n      } else if (q.assignedTables && Array.isArray(q.assignedTables)) {\n        const assignedCount = q.assignedTables.length;\n        const answeredCount = q.answeredTables.filter(t => (q.assignedTables as number[]).includes(t)).length;\n        pendingCount += assignedCount - answeredCount;\n      }\n    }\n\n    return {\n      totalTables: tablesCount.count,\n      totalQuestions: questionsCount.count,\n      totalAnswers: answersCount.count,\n      pendingAnswers: pendingCount,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":20636},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  pgTable,\n  varchar,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  jsonb,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['genelbaskan', 'genelsekreterlik', 'moderator']);\nexport const questionTypeEnum = pgEnum('question_type', ['general', 'specific']);\nexport const logActionEnum = pgEnum('log_action', ['login', 'logout', 'create_question', 'edit_question', 'delete_question', 'create_answer', 'edit_answer', 'delete_answer', 'create_user', 'edit_user', 'delete_user', 'send_feedback', 'import_users']);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  tcNumber: varchar(\"tc_number\", { length: 11 }).notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default('moderator'),\n  tableNumber: integer(\"table_number\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Tables (masa) for organizing moderators\nexport const tables = pgTable(\"tables\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  number: integer(\"number\").notNull().unique(),\n  name: varchar(\"name\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Questions\nexport const questions = pgTable(\"questions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  text: text(\"text\").notNull(),\n  type: questionTypeEnum(\"type\").notNull().default('general'),\n  assignedTables: jsonb(\"assigned_tables\"), // Array of table numbers for specific questions\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Answers/Responses\nexport const answers = pgTable(\"answers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  questionId: varchar(\"question_id\").notNull().references(() => questions.id, { onDelete: 'cascade' }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  tableNumber: integer(\"table_number\").notNull(),\n  text: text(\"text\").notNull(),\n  orderIndex: integer(\"order_index\").notNull().default(1), // For multiple answers per question\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Feedback from moderators to genelsekreterlik\nexport const feedback = pgTable(\"feedback\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  questionId: varchar(\"question_id\").notNull().references(() => questions.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }), // moderator who sent feedback\n  message: text(\"message\").notNull(),\n  response: text(\"response\"), // Response from genelsekreterlik\n  respondedBy: varchar(\"responded_by\").references(() => users.id), // who responded\n  respondedAt: timestamp(\"responded_at\"),\n  isRead: boolean(\"is_read\").notNull().default(false),\n  isResolved: boolean(\"is_resolved\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Activity logs\nexport const activityLogs = pgTable(\"activity_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  action: logActionEnum(\"action\").notNull(),\n  details: text(\"details\"),\n  metadata: jsonb(\"metadata\"), // Additional data like question_id, table_number, etc.\n  ipAddress: varchar(\"ip_address\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  questions: many(questions),\n  answers: many(answers),\n  feedback: many(feedback),\n  activityLogs: many(activityLogs),\n}));\n\nexport const questionsRelations = relations(questions, ({ one, many }) => ({\n  createdBy: one(users, {\n    fields: [questions.createdBy],\n    references: [users.id],\n  }),\n  answers: many(answers),\n  feedback: many(feedback),\n}));\n\nexport const answersRelations = relations(answers, ({ one }) => ({\n  question: one(questions, {\n    fields: [answers.questionId],\n    references: [questions.id],\n  }),\n  user: one(users, {\n    fields: [answers.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const feedbackRelations = relations(feedback, ({ one }) => ({\n  question: one(questions, {\n    fields: [feedback.questionId],\n    references: [questions.id],\n  }),\n  user: one(users, {\n    fields: [feedback.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const activityLogsRelations = relations(activityLogs, ({ one }) => ({\n  user: one(users, {\n    fields: [activityLogs.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  lastLogin: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTableSchema = createInsertSchema(tables).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertQuestionSchema = createInsertSchema(questions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAnswerSchema = createInsertSchema(answers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFeedbackSchema = createInsertSchema(feedback).omit({\n  id: true,\n  response: true,\n  respondedBy: true,\n  respondedAt: true,\n  createdAt: true,\n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Table = typeof tables.$inferSelect;\nexport type InsertTable = z.infer<typeof insertTableSchema>;\nexport type Question = typeof questions.$inferSelect;\nexport type InsertQuestion = z.infer<typeof insertQuestionSchema>;\nexport type Answer = typeof answers.$inferSelect;\nexport type InsertAnswer = z.infer<typeof insertAnswerSchema>;\nexport type Feedback = typeof feedback.$inferSelect;\nexport type InsertFeedback = z.infer<typeof insertFeedbackSchema>;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\n\n// Additional types for API responses\nexport type UserWithStats = User & {\n  answersCount?: number;\n  lastActivity?: string;\n};\n\nexport type QuestionWithStats = Question & {\n  answersCount?: number;\n  createdByName?: string;\n  assignedTableNames?: string[];\n};\n\nexport type AnswerWithDetails = Answer & {\n  questionText?: string | null;\n  userName?: string | null;\n};\n\nexport type FeedbackWithDetails = Feedback & {\n  questionText?: string | null;\n  userName?: string | null;\n  userTableNumber?: number | null;\n  respondedByName?: string | null;\n};\n\nexport type ActivityLogWithUser = ActivityLog & {\n  userFirstName?: string | null;\n  userLastName?: string | null;\n  userTcNumber?: string | null;\n};\n","size_bytes":7603},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport SplashScreen from \"@/pages/splash\";\nimport LoginPage from \"@/pages/login\";\nimport DashboardPage from \"@/pages/dashboard\";\nimport QuestionsPage from \"@/pages/questions\";\nimport UsersPage from \"@/pages/users\";\nimport ReportsPage from \"@/pages/reports\";\nimport FeedbackPage from \"@/pages/feedback\";\nimport LogsPage from \"@/pages/logs\";\nimport ModeratorQuestionsPage from \"@/pages/moderator-questions\";\nimport ResponsesPage from \"@/pages/responses\";\nimport TablesPage from \"@/pages/tables\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { user, isLoading, showSplash } = useAuth();\n\n  if (showSplash) {\n    return <SplashScreen />;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-pulse text-ak-yellow\">Yükleniyor...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <LoginPage />;\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={DashboardPage} />\n      <Route path=\"/questions\" component={user.role === 'moderator' ? ModeratorQuestionsPage : QuestionsPage} />\n      <Route path=\"/users\" component={UsersPage} />\n      <Route path=\"/reports\" component={ReportsPage} />\n      <Route path=\"/feedback\" component={FeedbackPage} />\n      <Route path=\"/logs\" component={LogsPage} />\n      <Route path=\"/responses\" component={ResponsesPage} />\n      <Route path=\"/tables\" component={TablesPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2012},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(12, 8%, 14%);\n  --muted: hsl(0, 0%, 96%);\n  --muted-foreground: hsl(0, 0%, 40%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(12, 8%, 14%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(12, 8%, 14%);\n  --border: hsl(0, 0%, 90%);\n  --input: hsl(0, 0%, 90%);\n  --primary: hsl(37, 100%, 47%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(209, 100%, 40%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(0, 0%, 96%);\n  --accent-foreground: hsl(12, 8%, 14%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(60, 9%, 98%);\n  --ring: hsl(37, 100%, 47%);\n  --radius: 0.5rem;\n  \n  /* AK Party specific colors */\n  --ak-yellow: hsl(37, 100%, 47%);\n  --ak-yellow-dark: hsl(37, 100%, 38%);\n  --ak-blue: hsl(209, 100%, 40%);\n  --ak-blue-dark: hsl(209, 100%, 35%);\n  --ak-text: hsl(12, 8%, 14%);\n  --ak-gray: hsl(0, 0%, 40%);\n  --ak-light-gray: hsl(0, 0%, 96%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 4%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 4%, 16%);\n  --muted-foreground: hsl(240, 5%, 65%);\n  --popover: hsl(240, 10%, 4%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 4%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 4%, 16%);\n  --input: hsl(240, 4%, 16%);\n  --primary: hsl(37, 100%, 47%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 4%, 16%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 4%, 16%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 5%, 84%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* AK Party specific utility classes */\n.ak-yellow {\n  color: var(--ak-yellow);\n}\n\n.bg-ak-yellow {\n  background-color: var(--ak-yellow);\n}\n\n.border-ak-yellow {\n  border-color: var(--ak-yellow);\n}\n\n.ak-yellow-dark {\n  color: var(--ak-yellow-dark);\n}\n\n.bg-ak-yellow-dark {\n  background-color: var(--ak-yellow-dark);\n}\n\n.ak-blue {\n  color: var(--ak-blue);\n}\n\n.bg-ak-blue {\n  background-color: var(--ak-blue);\n}\n\n.border-ak-blue {\n  border-color: var(--ak-blue);\n}\n\n.ak-blue-dark {\n  color: var(--ak-blue-dark);\n}\n\n.bg-ak-blue-dark {\n  background-color: var(--ak-blue-dark);\n}\n\n.ak-text {\n  color: var(--ak-text);\n}\n\n.ak-gray {\n  color: var(--ak-gray);\n}\n\n.bg-ak-gray {\n  background-color: var(--ak-gray);\n}\n\n.ak-light-gray {\n  color: var(--ak-light-gray);\n}\n\n.bg-ak-light-gray {\n  background-color: var(--ak-light-gray);\n}\n\n/* Loading animation for splash screen */\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.animate-pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n","size_bytes":2882},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n  role: 'genelbaskan' | 'genelsekreterlik' | 'moderator';\n  tableNumber?: number;\n}\n\ninterface LoginCredentials {\n  tcNumber: string;\n  password: string;\n}\n\nexport function useAuth() {\n  const [showSplash, setShowSplash] = useState(true);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Show splash screen for 3 seconds\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowSplash(false);\n    }, 3000);\n    \n    return () => clearTimeout(timer);\n  }, []);\n\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n    enabled: !showSplash,\n    queryFn: async () => {\n      const token = localStorage.getItem('auth_token');\n      if (!token) return null;\n      \n      try {\n        const response = await fetch('/api/auth/me', {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n          },\n        });\n        \n        if (!response.ok) {\n          localStorage.removeItem('auth_token');\n          return null;\n        }\n        \n        return response.json();\n      } catch (error) {\n        localStorage.removeItem('auth_token');\n        return null;\n      }\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginCredentials) => {\n      const response = await apiRequest('POST', '/api/auth/login', credentials);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem('auth_token', data.token);\n      queryClient.setQueryData([\"/api/auth/me\"], data.user);\n      toast({\n        title: \"Giriş Başarılı\",\n        description: \"Hoş geldiniz!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Giriş Hatası\",\n        description: error.message || \"Kimlik bilgileri geçersiz\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        await fetch('/api/auth/logout', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n          },\n        });\n      }\n    },\n    onSuccess: () => {\n      localStorage.removeItem('auth_token');\n      queryClient.setQueryData([\"/api/auth/me\"], null);\n      queryClient.clear();\n      toast({\n        title: \"Çıkış Başarılı\",\n        description: \"Güvenle çıkış yaptınız\",\n      });\n    },\n  });\n\n  return {\n    user,\n    isLoading: isLoading && !showSplash,\n    showSplash,\n    login: loginMutation.mutate,\n    logout: logoutMutation.mutate,\n    isLoggingIn: loginMutation.isPending,\n    isLoggingOut: logoutMutation.isPending,\n  };\n}\n","size_bytes":2997},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth-utils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*/.test(error.message);\n}\n\nexport function getAuthToken(): string | null {\n  return localStorage.getItem('auth_token');\n}\n\nexport function setAuthHeader(headers: Record<string, string> = {}): Record<string, string> {\n  const token = getAuthToken();\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  return headers;\n}\n","size_bytes":416},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Users, HelpCircle, MessageCircle, Clock } from \"lucide-react\";\nimport { setAuthHeader } from \"@/lib/auth-utils\";\n\ninterface DashboardStats {\n  totalTables: number;\n  totalQuestions: number;\n  totalAnswers: number;\n  pendingAnswers: number;\n}\n\nexport default function DashboardPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const { user } = useAuth();\n\n  const { data: stats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    queryFn: async () => {\n      const response = await fetch('/api/dashboard/stats', {\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch stats');\n      return response.json();\n    },\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n      \n      <div className=\"lg:ml-64\">\n        <Header title=\"Ana Panel\" onMenuClick={() => setSidebarOpen(true)} />\n        \n        <main className=\"p-4 sm:p-6 lg:p-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 rounded-lg bg-ak-yellow/10\">\n                    <Users className=\"text-ak-yellow text-xl\" size={24} />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium ak-gray\">Toplam Masa</p>\n                    <p className=\"text-2xl font-bold ak-text\">{stats?.totalTables || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 rounded-lg bg-ak-blue/10\">\n                    <HelpCircle className=\"text-ak-blue text-xl\" size={24} />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium ak-gray\">Toplam Soru</p>\n                    <p className=\"text-2xl font-bold ak-text\">{stats?.totalQuestions || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 rounded-lg bg-green-100\">\n                    <MessageCircle className=\"text-green-600 text-xl\" size={24} />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium ak-gray\">Cevaplanan</p>\n                    <p className=\"text-2xl font-bold ak-text\">{stats?.totalAnswers || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 rounded-lg bg-red-100\">\n                    <Clock className=\"text-red-600 text-xl\" size={24} />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium ak-gray\">Bekleyen</p>\n                    <p className=\"text-2xl font-bold ak-text\">{stats?.pendingAnswers || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"ak-text\">Son Aktiviteler</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm ak-text\">Sistem yeni başlatıldı</p>\n                      <p className=\"text-xs ak-gray\">Şimdi</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"ak-text\">Hoş Geldiniz</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <h3 className=\"text-lg font-semibold ak-text mb-2\">\n                    {user?.firstName} {user?.lastName}\n                  </h3>\n                  <p className=\"ak-gray\">\n                    AK Parti Gençlik Kolları İstişare Kampı Yönetim Sistemine hoş geldiniz.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5270},"client/src/pages/feedback.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Reply, MessageCircle, Trash2 } from \"lucide-react\";\nimport { setAuthHeader } from \"@/lib/auth-utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport type { FeedbackWithDetails } from \"@shared/schema\";\n\nexport default function FeedbackPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [responseModal, setResponseModal] = useState<{ open: boolean; feedbackId?: string }>({ open: false });\n  const [responseText, setResponseText] = useState(\"\");\n  \n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: feedbackItems = [], isLoading } = useQuery<FeedbackWithDetails[]>({\n    queryKey: [\"/api/feedback\"],\n    queryFn: async () => {\n      const response = await fetch('/api/feedback', {\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch feedback');\n      return response.json();\n    },\n    enabled: user?.role === 'genelsekreterlik' || user?.role === 'moderator',\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (feedbackId: string) => {\n      const response = await fetch(`/api/feedback/${feedbackId}/read`, {\n        method: 'PUT',\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) throw new Error('Failed to mark as read');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/feedback\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Geri bildirim okundu olarak işaretlendi\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"İşlem gerçekleştirilemedi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const markAsResolvedMutation = useMutation({\n    mutationFn: async (feedbackId: string) => {\n      const response = await fetch(`/api/feedback/${feedbackId}/resolve`, {\n        method: 'PUT',\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) throw new Error('Failed to mark as resolved');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/feedback\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Geri bildirim çözüldü olarak işaretlendi\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"İşlem gerçekleştirilemedi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const respondToFeedbackMutation = useMutation({\n    mutationFn: async ({ feedbackId, response }: { feedbackId: string; response: string }) => {\n      const res = await fetch(`/api/feedback/${feedbackId}/respond`, {\n        method: 'PUT',\n        headers: {\n          ...setAuthHeader(),\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ response }),\n      });\n      if (!res.ok) throw new Error('Failed to respond to feedback');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/feedback\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Geri bildirime yanıt verildi\",\n      });\n      setResponseModal({ open: false });\n      setResponseText(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Yanıt gönderilemedi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteFeedbackMutation = useMutation({\n    mutationFn: async (feedbackId: string) => {\n      const response = await fetch(`/api/feedback/${feedbackId}`, {\n        method: 'DELETE',\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) throw new Error('Failed to delete feedback');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/feedback\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Geri bildirim silindi\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Geri bildirim silinemedi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredFeedback = feedbackItems.filter(item => {\n    if (statusFilter === \"all\") return true;\n    if (statusFilter === \"unread\") return !item.isRead;\n    if (statusFilter === \"read\") return item.isRead && !item.isResolved;\n    if (statusFilter === \"resolved\") return item.isResolved;\n    return true;\n  });\n\n  const getStatusBadge = (feedback: FeedbackWithDetails) => {\n    if (feedback.isResolved) {\n      return <Badge className=\"bg-green-100 text-green-800\">Çözüldü</Badge>;\n    }\n    if (feedback.isRead) {\n      return <Badge className=\"bg-blue-100 text-blue-800\">Okundu</Badge>;\n    }\n    return <Badge className=\"bg-red-100 text-red-800\">Okunmamış</Badge>;\n  };\n\n  const getUserInitials = (tableNumber?: number) => {\n    return tableNumber ? `M${tableNumber}` : \"U\";\n  };\n\n  if (user?.role !== 'genelsekreterlik' && user?.role !== 'moderator') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <p className=\"ak-text\">Bu sayfaya erişim yetkiniz bulunmamaktadır.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n      \n      <div className=\"lg:ml-64\">\n        <Header title=\"Geri Bildirimler\" onMenuClick={() => setSidebarOpen(true)} />\n        \n        <main className=\"p-4 sm:p-6 lg:p-8\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold ak-text\">Geri Bildirimler</h2>\n            <div className=\"flex space-x-3\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Durum seçin\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Tüm Durumlar</SelectItem>\n                  <SelectItem value=\"unread\">Okunmamış</SelectItem>\n                  <SelectItem value=\"read\">Okunmuş</SelectItem>\n                  <SelectItem value=\"resolved\">Çözüldü</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {isLoading ? (\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"text-center ak-gray\">Yükleniyor...</div>\n              </CardContent>\n            </Card>\n          ) : filteredFeedback.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"text-center ak-gray\">\n                  {statusFilter === \"all\" ? \"Henüz geri bildirim bulunmuyor\" : \"Seçilen kriterlere uygun geri bildirim bulunamadı\"}\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-6\">\n              {filteredFeedback.map((feedback) => (\n                <Card key={feedback.id}>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-ak-blue rounded-full flex items-center justify-center\">\n                          <span className=\"text-white font-semibold text-sm\">\n                            {getUserInitials(feedback.userTableNumber ?? undefined)}\n                          </span>\n                        </div>\n                        <div>\n                          <h4 className=\"text-lg font-semibold ak-text\">\n                            {feedback.userTableNumber ? `Masa ${feedback.userTableNumber}` : 'Bilinmeyen Masa'} - {feedback.userName}\n                          </h4>\n                          <p className=\"text-sm ak-gray\">\n                            {new Date(feedback.createdAt).toLocaleString('tr-TR')}\n                          </p>\n                        </div>\n                      </div>\n                      {getStatusBadge(feedback)}\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <h5 className=\"font-medium ak-text mb-2\">\n                      Soru: \"{feedback.questionText}\"\n                    </h5>\n                    <p className=\"ak-gray mb-4\">\"{feedback.message}\"</p>\n                    \n                    {feedback.response && (\n                      <div className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n                        <div className=\"flex items-start space-x-2\">\n                          <MessageCircle className=\"text-ak-blue mt-1\" size={16} />\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm font-medium ak-text mb-1\">\n                              Yanıt {feedback.respondedByName ? `(${feedback.respondedByName})` : ''}\n                            </p>\n                            <p className=\"text-sm ak-gray\">{feedback.response}</p>\n                            {feedback.respondedAt && (\n                              <p className=\"text-xs text-gray-500 mt-1\">\n                                {new Date(feedback.respondedAt).toLocaleString('tr-TR')}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {!feedback.isResolved && user?.role === 'genelsekreterlik' && (\n                      <div className=\"flex space-x-3 mt-4\">\n                        {!feedback.isRead && (\n                          <Button \n                            onClick={() => markAsReadMutation.mutate(feedback.id)}\n                            className=\"bg-ak-yellow hover:bg-ak-yellow-dark text-white\"\n                            disabled={markAsReadMutation.isPending}\n                          >\n                            <Check className=\"mr-1\" size={16} />\n                            Okundu İşaretle\n                          </Button>\n                        )}\n                        {!feedback.response && (\n                          <Button \n                            onClick={() => setResponseModal({ open: true, feedbackId: feedback.id })}\n                            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                          >\n                            <Reply className=\"mr-1\" size={16} />\n                            Yanıtla\n                          </Button>\n                        )}\n                        <Button \n                          onClick={() => markAsResolvedMutation.mutate(feedback.id)}\n                          className=\"bg-green-600 hover:bg-green-700 text-white\"\n                          disabled={markAsResolvedMutation.isPending}\n                        >\n                          <Check className=\"mr-1\" size={16} />\n                          Çözüldü İşaretle\n                        </Button>\n                        <Button \n                          onClick={() => {\n                            if (window.confirm('Bu geri bildirimi silmek istediğinizden emin misiniz?')) {\n                              deleteFeedbackMutation.mutate(feedback.id);\n                            }\n                          }}\n                          className=\"bg-red-600 hover:bg-red-700 text-white\"\n                          disabled={deleteFeedbackMutation.isPending}\n                        >\n                          <Trash2 className=\"mr-1\" size={16} />\n                          Sil\n                        </Button>\n                      </div>\n                    )}\n\n                    {feedback.isResolved && (\n                      <div className=\"bg-ak-light-gray p-3 rounded-lg\">\n                        <p className=\"text-sm ak-gray\">\n                          <strong>Durum:</strong> Bu geri bildirim çözüldü olarak işaretlenmiştir.\n                        </p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </main>\n      </div>\n\n      {/* Response Modal */}\n      <Dialog open={responseModal.open} onOpenChange={(open) => setResponseModal({ open })}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Geri Bildirime Yanıt Ver</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div>\n              <Label htmlFor=\"response\">Yanıt Mesajı</Label>\n              <Textarea\n                id=\"response\"\n                value={responseText}\n                onChange={(e) => setResponseText(e.target.value)}\n                placeholder=\"Geri bildirime yanıtınızı yazın...\"\n                className=\"mt-1\"\n                rows={4}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setResponseModal({ open: false });\n                setResponseText(\"\");\n              }}\n            >\n              İptal\n            </Button>\n            <Button\n              onClick={() => {\n                if (responseModal.feedbackId && responseText.trim()) {\n                  respondToFeedbackMutation.mutate({\n                    feedbackId: responseModal.feedbackId,\n                    response: responseText,\n                  });\n                }\n              }}\n              disabled={!responseText.trim() || respondToFeedbackMutation.isPending}\n              className=\"bg-ak-blue hover:bg-ak-blue-dark text-white\"\n            >\n              Yanıtla\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":14610},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { LogIn } from \"lucide-react\";\nimport akPartiLogo from \"@assets/akpartilogo_1753719301210.png\";\n\nexport default function LoginPage() {\n  const [tcNumber, setTcNumber] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const { login, isLoggingIn } = useAuth();\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    login({ tcNumber, password });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-ak-yellow/10 to-ak-blue/10\">\n      <div className=\"max-w-md w-full mx-4\">\n        <Card className=\"shadow-2xl\">\n          <CardHeader className=\"text-center pb-6\">\n            <img \n              src={akPartiLogo} \n              alt=\"AK Parti\" \n              className=\"w-24 h-24 mx-auto mb-4 object-contain\"\n            />\n            <h2 className=\"text-2xl font-bold ak-text\">İrade, İstikamet ve İstişare Kampı</h2>\n            <p className=\"ak-gray mt-2\">AK Parti Gençlik Kolları Genel Sekreterlik</p>\n          </CardHeader>\n          \n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"tcno\" className=\"ak-text font-medium\">\n                  T.C. Kimlik Numarası\n                </Label>\n                <Input\n                  id=\"tcno\"\n                  type=\"text\"\n                  maxLength={11}\n                  value={tcNumber}\n                  onChange={(e) => setTcNumber(e.target.value)}\n                  className=\"mt-2 focus:ring-ak-yellow focus:border-ak-yellow\"\n                  placeholder=\"11 haneli T.C. kimlik numaranız\"\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"password\" className=\"ak-text font-medium\">\n                  Şifre\n                </Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"mt-2 focus:ring-ak-yellow focus:border-ak-yellow\"\n                  placeholder=\"Şifrenizi giriniz\"\n                  required\n                />\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full bg-ak-yellow hover:bg-ak-yellow-dark text-white font-semibold py-3\"\n                disabled={isLoggingIn}\n              >\n                <LogIn className=\"mr-2\" size={16} />\n                {isLoggingIn ? 'Giriş yapılıyor...' : 'Giriş Yap'}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3016},"client/src/pages/logs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { setAuthHeader } from \"@/lib/auth-utils\";\nimport type { ActivityLogWithUser } from \"@shared/schema\";\n\nexport default function LogsPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [actionFilter, setActionFilter] = useState(\"all\");\n  const [dateFilter, setDateFilter] = useState(\"\");\n  \n  const { user } = useAuth();\n\n  const { data: logs = [], isLoading } = useQuery<ActivityLogWithUser[]>({\n    queryKey: [\"/api/logs\"],\n    queryFn: async () => {\n      const response = await fetch('/api/logs?limit=100', {\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch logs');\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  const filteredLogs = logs.filter(log => {\n    const matchesAction = actionFilter === \"all\" || log.action === actionFilter;\n    const matchesDate = !dateFilter || \n      new Date(log.createdAt).toDateString() === new Date(dateFilter).toDateString();\n    return matchesAction && matchesDate;\n  });\n\n  const getActionBadge = (action: string) => {\n    switch (action) {\n      case 'login':\n      case 'logout':\n        return <Badge className=\"bg-gray-100 text-gray-800\">Giriş/Çıkış</Badge>;\n      case 'create_question':\n      case 'edit_question':\n      case 'delete_question':\n        return <Badge className=\"bg-ak-blue/20 text-ak-blue\">Soru İşlemi</Badge>;\n      case 'create_answer':\n      case 'edit_answer':\n      case 'delete_answer':\n        return <Badge className=\"bg-green-100 text-green-800\">Cevap İşlemi</Badge>;\n      case 'create_user':\n      case 'edit_user':\n      case 'delete_user':\n        return <Badge className=\"bg-ak-yellow/20 text-ak-yellow\">Kullanıcı İşlemi</Badge>;\n      case 'send_feedback':\n        return <Badge className=\"bg-purple-100 text-purple-800\">Geri Bildirim</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800\">{action}</Badge>;\n    }\n  };\n\n  const getUserDisplay = (log: ActivityLogWithUser) => {\n    if (log.userFirstName && log.userLastName && log.userTcNumber) {\n      return `${log.userFirstName} ${log.userLastName} (${log.userTcNumber})`;\n    }\n    return log.userId.substring(0, 8) + \"...\";\n  };\n\n  if (user?.role === 'moderator') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <p className=\"ak-text\">Bu sayfaya erişim yetkiniz bulunmamaktadır.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n      \n      <div className=\"lg:ml-64\">\n        <Header title=\"Sistem Logları\" onMenuClick={() => setSidebarOpen(true)} />\n        \n        <main className=\"p-4 sm:p-6 lg:p-8\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold ak-text\">Sistem Logları</h2>\n            <div className=\"flex space-x-3\">\n              <Select value={actionFilter} onValueChange={setActionFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"İşlem türü seçin\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Tüm İşlemler</SelectItem>\n                  <SelectItem value=\"login\">Giriş</SelectItem>\n                  <SelectItem value=\"logout\">Çıkış</SelectItem>\n                  <SelectItem value=\"create_question\">Soru Oluşturma</SelectItem>\n                  <SelectItem value=\"create_answer\">Cevap Ekleme</SelectItem>\n                  <SelectItem value=\"create_user\">Kullanıcı Oluşturma</SelectItem>\n                  <SelectItem value=\"send_feedback\">Geri Bildirim</SelectItem>\n                </SelectContent>\n              </Select>\n              <Input\n                type=\"date\"\n                value={dateFilter}\n                onChange={(e) => setDateFilter(e.target.value)}\n                className=\"w-48\"\n              />\n            </div>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              {isLoading ? (\n                <div className=\"p-6 text-center ak-gray\">Yükleniyor...</div>\n              ) : filteredLogs.length === 0 ? (\n                <div className=\"p-6 text-center ak-gray\">\n                  {actionFilter === \"all\" && !dateFilter \n                    ? \"Henüz log kaydı bulunmuyor\" \n                    : \"Seçilen kriterlere uygun log bulunamadı\"\n                  }\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-ak-light-gray\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          Zaman\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          Kullanıcı\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          İşlem\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          Detay\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          IP Adresi\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {filteredLogs.map((log) => (\n                        <tr key={log.id}>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm ak-gray\">\n                            {new Date(log.createdAt).toLocaleString('tr-TR')}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <div className=\"w-6 h-6 bg-ak-blue rounded-full flex items-center justify-center mr-2\">\n                                <span className=\"text-white text-xs\">U</span>\n                              </div>\n                              <span className=\"text-sm ak-text\">{getUserDisplay(log)}</span>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            {getActionBadge(log.action)}\n                          </td>\n                          <td className=\"px-6 py-4 text-sm ak-gray max-w-md truncate\">\n                            {log.details || 'Detay bulunmuyor'}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm ak-gray\">\n                            {log.ipAddress || 'Bilinmiyor'}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7904},"client/src/pages/moderator-questions.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Eye, MessageSquare } from \"lucide-react\";\nimport { setAuthHeader } from \"@/lib/auth-utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AnswerModal from \"@/components/modals/answer-modal\";\nimport type { QuestionWithStats, AnswerWithDetails } from \"@shared/schema\";\n\nexport default function ModeratorQuestionsPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [showAnswerModal, setShowAnswerModal] = useState(false);\n  const [selectedQuestion, setSelectedQuestion] = useState<QuestionWithStats | null>(null);\n  const [showAnswers, setShowAnswers] = useState<Record<string, boolean>>({});\n  \n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: questions = [], isLoading } = useQuery<QuestionWithStats[]>({\n    queryKey: [\"/api/questions\"],\n    queryFn: async () => {\n      const response = await fetch('/api/questions', {\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch questions');\n      return response.json();\n    },\n    enabled: user?.role === 'moderator',\n  });\n\n  const { data: myAnswers = [] } = useQuery<AnswerWithDetails[]>({\n    queryKey: [\"/api/answers/my\"],\n    queryFn: async () => {\n      const response = await fetch('/api/answers/my', {\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch my answers');\n      return response.json();\n    },\n    enabled: user?.role === 'moderator',\n  });\n\n  const sendFeedbackMutation = useMutation({\n    mutationFn: async ({ questionId, message }: { questionId: string; message: string }) => {\n      const response = await fetch('/api/feedback', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...setAuthHeader(),\n        },\n        body: JSON.stringify({ questionId, message }),\n      });\n      if (!response.ok) throw new Error('Failed to send feedback');\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Başarılı\",\n        description: \"Geri bildirim gönderildi\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Geri bildirim gönderilemedi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddAnswer = (question: QuestionWithStats) => {\n    setSelectedQuestion(question);\n    setShowAnswerModal(true);\n  };\n\n  const handleViewAnswers = async (questionId: string) => {\n    setShowAnswers(prev => ({ ...prev, [questionId]: !prev[questionId] }));\n  };\n\n  const handleSendFeedback = (question: QuestionWithStats) => {\n    const message = prompt('Geri bildirim mesajınız:');\n    if (message && message.trim()) {\n      sendFeedbackMutation.mutate({ questionId: question.id, message: message.trim() });\n    }\n  };\n\n  const getAnswersForQuestion = (questionId: string) => {\n    return myAnswers.filter(answer => answer.questionId === questionId);\n  };\n\n  const hasAnswered = (questionId: string) => {\n    return myAnswers.some(answer => answer.questionId === questionId);\n  };\n\n  if (user?.role !== 'moderator') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <p className=\"ak-text\">Bu sayfaya erişim yetkiniz bulunmamaktadır.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n      \n      <div className=\"lg:ml-64\">\n        <Header title=\"Atanmış Sorularım\" onMenuClick={() => setSidebarOpen(true)} />\n        \n        <main className=\"p-4 sm:p-6 lg:p-8\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold ak-text\">Atanmış Sorularım</h2>\n            <div className=\"bg-ak-yellow/10 px-4 py-2 rounded-lg\">\n              <span className=\"ak-yellow font-medium\">\n                {user?.tableNumber ? `Masa ${user.tableNumber}` : 'Masa Atanmamış'}\n              </span>\n            </div>\n          </div>\n\n          {isLoading ? (\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"text-center ak-gray\">Yükleniyor...</div>\n              </CardContent>\n            </Card>\n          ) : questions.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"text-center ak-gray\">Size atanmış soru bulunmuyor</div>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-6\">\n              {questions.map((question) => {\n                const questionAnswers = getAnswersForQuestion(question.id);\n                const answered = hasAnswered(question.id);\n                \n                return (\n                  <Card key={question.id}>\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between\">\n                        <div>\n                          <h4 className=\"text-lg font-semibold ak-text mb-2\">\n                            {question.text}\n                          </h4>\n                          <div className=\"flex items-center space-x-3 text-sm ak-gray\">\n                            <Badge \n                              className={question.type === 'general' \n                                ? 'bg-ak-blue/10 text-ak-blue' \n                                : 'bg-ak-yellow/10 text-ak-yellow'\n                              }\n                            >\n                              {question.type === 'general' ? 'Genel Soru' : 'Özel Soru'}\n                            </Badge>\n                            <span>Eklenme: {new Date(question.createdAt).toLocaleDateString('tr-TR')}</span>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-sm ak-gray\">Cevap Durumu</p>\n                          <Badge className={answered ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}>\n                            {answered ? 'Cevaplandı' : 'Beklemede'}\n                          </Badge>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex space-x-3 mb-4\">\n                        <Button \n                          onClick={() => handleAddAnswer(question)}\n                          className=\"bg-ak-yellow hover:bg-ak-yellow-dark text-white\"\n                        >\n                          <Plus className=\"mr-2\" size={16} />\n                          Cevap Ekle\n                        </Button>\n                        {answered && (\n                          <Button \n                            onClick={() => handleViewAnswers(question.id)}\n                            className=\"bg-ak-blue hover:bg-ak-blue-dark text-white\"\n                          >\n                            <Eye className=\"mr-2\" size={16} />\n                            Cevapları Görüntüle ({questionAnswers.length})\n                          </Button>\n                        )}\n                        <Button \n                          onClick={() => handleSendFeedback(question)}\n                          variant=\"outline\"\n                          className=\"border-gray-500 text-gray-500 hover:bg-gray-50\"\n                        >\n                          <MessageSquare className=\"mr-2\" size={16} />\n                          Geri Bildirim Gönder\n                        </Button>\n                      </div>\n\n                      {/* Show answers if expanded */}\n                      {showAnswers[question.id] && questionAnswers.length > 0 && (\n                        <div className=\"space-y-3\">\n                          {questionAnswers.map((answer, index) => (\n                            <div key={answer.id} className=\"bg-ak-light-gray p-4 rounded-lg\">\n                              <h5 className=\"font-medium ak-text mb-2\">Cevap #{index + 1}</h5>\n                              <p className=\"ak-gray\">{answer.text}</p>\n                              <p className=\"text-xs ak-gray mt-2\">\n                                Eklenme: {new Date(answer.createdAt).toLocaleString('tr-TR')}\n                              </p>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </main>\n      </div>\n\n      <AnswerModal\n        isOpen={showAnswerModal}\n        onClose={() => {\n          setShowAnswerModal(false);\n          setSelectedQuestion(null);\n        }}\n        question={selectedQuestion}\n      />\n    </div>\n  );\n}\n","size_bytes":9336},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/questions.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit, Trash2 } from \"lucide-react\";\nimport { setAuthHeader } from \"@/lib/auth-utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport QuestionModal from \"@/components/modals/question-modal\";\nimport type { QuestionWithStats } from \"@shared/schema\";\n\nexport default function QuestionsPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState(\"all\");\n  const [showModal, setShowModal] = useState(false);\n  const [editingQuestion, setEditingQuestion] = useState<QuestionWithStats | null>(null);\n  \n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Check if user has permission to access this page\n  if (user?.role === 'moderator') {\n    window.location.href = '/questions'; // This will redirect to moderator questions\n    return null;\n  }\n\n  const { data: questions = [], isLoading } = useQuery<QuestionWithStats[]>({\n    queryKey: [\"/api/questions\"],\n    queryFn: async () => {\n      const response = await fetch('/api/questions', {\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch questions');\n      return response.json();\n    },\n  });\n\n  const deleteQuestionMutation = useMutation({\n    mutationFn: async (questionId: string) => {\n      const response = await fetch(`/api/questions/${questionId}`, {\n        method: 'DELETE',\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) throw new Error('Failed to delete question');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Soru silindi\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Soru silinemedi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredQuestions = questions.filter(question => {\n    const matchesSearch = question.text.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesFilter = filterType === \"all\" || question.type === filterType;\n    return matchesSearch && matchesFilter;\n  });\n\n  const handleEdit = (question: QuestionWithStats) => {\n    setEditingQuestion(question);\n    setShowModal(true);\n  };\n\n  const handleDelete = (questionId: string) => {\n    if (confirm('Bu soruyu silmek istediğinizden emin misiniz?')) {\n      deleteQuestionMutation.mutate(questionId);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    setEditingQuestion(null);\n  };\n\n  if (user?.role !== 'genelsekreterlik') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <p className=\"ak-text\">Bu sayfaya erişim yetkiniz bulunmamaktadır.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n      \n      <div className=\"lg:ml-64\">\n        <Header title=\"Soru Yönetimi\" onMenuClick={() => setSidebarOpen(true)} />\n        \n        <main className=\"p-4 sm:p-6 lg:p-8\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold ak-text\">Soru Yönetimi</h2>\n            <Button \n              onClick={() => setShowModal(true)} \n              className=\"bg-ak-yellow hover:bg-ak-yellow-dark text-white\"\n            >\n              <Plus className=\"mr-2\" size={16} />\n              Yeni Soru Ekle\n            </Button>\n          </div>\n\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0\">\n                <div className=\"flex space-x-4\">\n                  <Select value={filterType} onValueChange={setFilterType}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue placeholder=\"Soru türü seçin\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Tüm Sorular</SelectItem>\n                      <SelectItem value=\"general\">Genel Sorular</SelectItem>\n                      <SelectItem value=\"specific\">Masa Özel Sorular</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Soru ara...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"w-64\"\n                  />\n                </div>\n              </div>\n            </CardHeader>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              {isLoading ? (\n                <div className=\"p-6 text-center ak-gray\">Yükleniyor...</div>\n              ) : filteredQuestions.length === 0 ? (\n                <div className=\"p-6 text-center ak-gray\">Soru bulunamadı</div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-ak-light-gray\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          Soru\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          Tür\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          Cevap Sayısı\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          Tarih\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          İşlemler\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {filteredQuestions.map((question) => (\n                        <tr key={question.id}>\n                          <td className=\"px-6 py-4\">\n                            <div className=\"text-sm font-medium ak-text max-w-md\">\n                              {question.text}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge \n                              variant={question.type === 'general' ? 'default' : 'secondary'}\n                              className={question.type === 'general' ? 'bg-ak-blue/10 text-ak-blue' : 'bg-ak-yellow/10 text-ak-yellow'}\n                            >\n                              {question.type === 'general' ? 'Genel' : 'Özel'}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm ak-text\">\n                            {question.answersCount || 0}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm ak-gray\">\n                            {new Date(question.createdAt).toLocaleDateString('tr-TR')}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(question)}\n                              className=\"text-ak-blue hover:text-ak-blue-dark\"\n                            >\n                              <Edit size={16} />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(question.id)}\n                              className=\"text-red-600 hover:text-red-800\"\n                            >\n                              <Trash2 size={16} />\n                            </Button>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      <QuestionModal\n        isOpen={showModal}\n        onClose={handleCloseModal}\n        question={editingQuestion}\n      />\n    </div>\n  );\n}\n","size_bytes":9457},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileSpreadsheet, FileText, Filter } from \"lucide-react\";\nimport { setAuthHeader } from \"@/lib/auth-utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { AnswerWithDetails } from \"@shared/schema\";\n\nexport default function ReportsPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [dateFilter, setDateFilter] = useState(\"last7days\");\n  const [tableFilter, setTableFilter] = useState(\"all\");\n  const [questionFilter, setQuestionFilter] = useState(\"all\");\n  \n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const { data: answers = [], isLoading } = useQuery<AnswerWithDetails[]>({\n    queryKey: [\"/api/answers\"],\n    queryFn: async () => {\n      const response = await fetch('/api/answers', {\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch answers');\n      return response.json();\n    },\n    enabled: user?.role === 'genelbaskan' || user?.role === 'genelsekreterlik',\n  });\n\n  // Calculate stats\n  const totalAnswers = answers.length;\n  const uniqueTables = new Set(answers.map(a => a.tableNumber)).size;\n  const responseRate = uniqueTables > 0 ? Math.round((totalAnswers / (uniqueTables * 10)) * 100) : 0; // Assuming 10 questions on average\n  const avgResponseTime = 12; // Mock data for demo\n\n  const handleExportExcel = async () => {\n    try {\n      toast({\n        title: \"Excel İndiriliyor\",\n        description: \"Excel formatı henüz desteklenmiyor. CSV formatını kullanabilirsiniz.\",\n        variant: \"destructive\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Hata\",\n        description: \"Excel dosyası indirilemedi\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleExportCSV = async () => {\n    try {\n      const response = await fetch('/api/export/answers?format=csv', {\n        headers: setAuthHeader(),\n      });\n      \n      if (!response.ok) throw new Error('Export failed');\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `cevaplar_${new Date().toLocaleDateString('tr-TR').replace(/\\./g, '-')}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Başarılı\",\n        description: \"CSV dosyası indirildi\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Hata\",\n        description: \"CSV dosyası indirilemedi\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (user?.role === 'moderator') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <p className=\"ak-text\">Bu sayfaya erişim yetkiniz bulunmamaktadır.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n      \n      <div className=\"lg:ml-64\">\n        <Header title=\"Raporlar ve Analizler\" onMenuClick={() => setSidebarOpen(true)} />\n        \n        <main className=\"p-4 sm:p-6 lg:p-8\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold ak-text\">Raporlar ve Analizler</h2>\n            <div className=\"flex space-x-3\">\n              <Button \n                onClick={handleExportExcel}\n                className=\"bg-green-600 hover:bg-green-700 text-white\"\n              >\n                <FileSpreadsheet className=\"mr-2\" size={16} />\n                Excel İndir\n              </Button>\n              <Button \n                onClick={handleExportCSV}\n                className=\"bg-ak-blue hover:bg-ak-blue-dark text-white\"\n              >\n                <FileText className=\"mr-2\" size={16} />\n                CSV İndir\n              </Button>\n            </div>\n          </div>\n\n          {/* Filter Section */}\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"ak-text\">Filtreleme Seçenekleri</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium ak-gray mb-2\">Tarih Aralığı</label>\n                  <Select value={dateFilter} onValueChange={setDateFilter}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Tarih seçin\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"last7days\">Son 7 gün</SelectItem>\n                      <SelectItem value=\"last30days\">Son 30 gün</SelectItem>\n                      <SelectItem value=\"custom\">Özel aralık</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium ak-gray mb-2\">Masa Seçimi</label>\n                  <Select value={tableFilter} onValueChange={setTableFilter}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Masa seçin\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Tüm Masalar</SelectItem>\n                      {Array.from({ length: 12 }, (_, i) => (\n                        <SelectItem key={i + 1} value={`table${i + 1}`}>\n                          Masa {i + 1}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium ak-gray mb-2\">Soru Kategorisi</label>\n                  <Select value={questionFilter} onValueChange={setQuestionFilter}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Kategori seçin\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Tüm Sorular</SelectItem>\n                      <SelectItem value=\"general\">Genel Sorular</SelectItem>\n                      <SelectItem value=\"specific\">Özel Sorular</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex items-end\">\n                  <Button className=\"w-full bg-ak-yellow hover:bg-ak-yellow-dark text-white\">\n                    <Filter className=\"mr-2\" size={16} />\n                    Filtrele\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Summary Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"ak-text\">Cevap Verme Oranı</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center\">\n                  <div className=\"text-4xl font-bold text-green-600 mb-2\">{responseRate}%</div>\n                  <p className=\"text-sm ak-gray\">Masaların cevaplama oranı</p>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle className=\"ak-text\">En Aktif Masa</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center\">\n                  <div className=\"text-4xl font-bold ak-yellow mb-2\">\n                    {uniqueTables > 0 ? Math.max(...Array.from(new Set(answers.map(a => a.tableNumber)))) : '-'}\n                  </div>\n                  <p className=\"text-sm ak-gray\">\n                    {totalAnswers > 0 ? `${Math.max(...Object.values(\n                      answers.reduce((acc, a) => {\n                        acc[a.tableNumber] = (acc[a.tableNumber] || 0) + 1;\n                        return acc;\n                      }, {} as Record<number, number>)\n                    ))} cevap ile` : 'Henüz cevap yok'}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle className=\"ak-text\">Ortalama Yanıt Süresi</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center\">\n                  <div className=\"text-4xl font-bold ak-blue mb-2\">{avgResponseTime}</div>\n                  <p className=\"text-sm ak-gray\">dakika</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Detailed Reports Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"ak-text\">Detaylı Cevap Raporu</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              {isLoading ? (\n                <div className=\"p-6 text-center ak-gray\">Yükleniyor...</div>\n              ) : answers.length === 0 ? (\n                <div className=\"p-6 text-center ak-gray\">Henüz cevap bulunmuyor</div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-ak-light-gray\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          Masa\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          Soru\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          Cevap\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          Tarih\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {answers.slice(0, 10).map((answer) => (\n                        <tr key={answer.id}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge className=\"bg-ak-yellow/20 text-ak-yellow font-medium\">\n                              Masa {answer.tableNumber}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4\">\n                            <div className=\"text-sm ak-text max-w-xs truncate\">\n                              {answer.questionText}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4\">\n                            <div className=\"text-sm ak-gray max-w-md truncate\">\n                              {answer.text}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm ak-gray\">\n                            {new Date(answer.createdAt).toLocaleString('tr-TR')}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12175},"client/src/pages/responses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit, Trash2, Download, ChevronRight } from \"lucide-react\";\nimport { setAuthHeader } from \"@/lib/auth-utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AnswerModal from \"@/components/modals/answer-modal\";\nimport type { AnswerWithDetails, QuestionWithStats } from \"@shared/schema\";\n\nexport default function ResponsesPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [showAnswerModal, setShowAnswerModal] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] = useState<AnswerWithDetails | null>(null);\n  const [selectedQuestionId, setSelectedQuestionId] = useState<string | null>(null);\n  \n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch questions\n  const { data: questions = [], isLoading: questionsLoading } = useQuery<QuestionWithStats[]>({\n    queryKey: [\"/api/questions\"],\n    queryFn: async () => {\n      const response = await fetch('/api/questions', {\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch questions');\n      return response.json();\n    },\n  });\n\n  const { data: answers = [], isLoading: answersLoading } = useQuery<AnswerWithDetails[]>({\n    queryKey: user?.role === 'moderator' ? [\"/api/answers/my\"] : [\"/api/answers\"],\n    queryFn: async () => {\n      const endpoint = user?.role === 'moderator' ? '/api/answers/my' : '/api/answers';\n      const response = await fetch(endpoint, {\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch answers');\n      return response.json();\n    },\n  });\n\n  const deleteAnswerMutation = useMutation({\n    mutationFn: async (answerId: string) => {\n      const response = await fetch(`/api/answers/${answerId}`, {\n        method: 'DELETE',\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) throw new Error('Failed to delete answer');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/answers/my\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Cevap silindi\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Cevap silinemedi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter answers based on selected question\n  const filteredAnswers = selectedQuestionId \n    ? answers.filter(answer => answer.questionId === selectedQuestionId)\n    : [];\n\n  const handleEdit = (answer: AnswerWithDetails) => {\n    setSelectedAnswer(answer);\n    setShowAnswerModal(true);\n  };\n\n  const handleDelete = (answerId: string) => {\n    if (confirm('Bu cevabı silmek istediğinizden emin misiniz?')) {\n      deleteAnswerMutation.mutate(answerId);\n    }\n  };\n\n  const handleDownloadAll = async () => {\n    try {\n      const response = await fetch('/api/export/answers?format=csv', {\n        headers: setAuthHeader(),\n      });\n      \n      if (!response.ok) throw new Error('Export failed');\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `tum_cevaplar_${new Date().toLocaleDateString('tr-TR').replace(/\\./g, '-')}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Başarılı\",\n        description: \"Tüm cevaplar CSV olarak indirildi\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Hata\",\n        description: \"CSV dosyası indirilemedi\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDownloadQuestion = async (questionId: string, questionText: string) => {\n    try {\n      const questionAnswers = answers.filter(a => a.questionId === questionId);\n      \n      const csv = [\n        ['Soru', 'Masa No', 'Cevap', 'Cevaplayan', 'Tarih'].join(','),\n        ...questionAnswers.map(answer => [\n          `\"${questionText}\"`,\n          answer.tableNumber,\n          `\"${answer.text.replace(/\"/g, '\"\"')}\"`,\n          `\"${answer.userName || 'Bilinmeyen'}\"`,\n          new Date(answer.createdAt).toLocaleString('tr-TR')\n        ].join(','))\n      ].join('\\n');\n      \n      const blob = new Blob(['\\ufeff' + csv], { type: 'text/csv;charset=utf-8;' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `soru_cevaplari_${new Date().toLocaleDateString('tr-TR').replace(/\\./g, '-')}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Başarılı\",\n        description: \"Soru cevapları CSV olarak indirildi\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Hata\",\n        description: \"CSV dosyası indirilemedi\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (user?.role !== 'moderator' && user?.role !== 'genelbaskan' && user?.role !== 'genelsekreterlik') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <p className=\"ak-text\">Bu sayfaya erişim yetkiniz bulunmamaktadır.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const selectedQuestion = questions.find(q => q.id === selectedQuestionId);\n  const isLoading = questionsLoading || answersLoading;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n      \n      <div className=\"lg:ml-64\">\n        <Header title=\"Cevaplar\" onMenuClick={() => setSidebarOpen(true)} />\n        \n        <main className=\"p-4 sm:p-6 lg:p-8\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold ak-text\">Cevaplar</h2>\n            <Button \n              onClick={handleDownloadAll}\n              variant=\"outline\"\n              className=\"text-ak-blue hover:text-ak-blue-dark\"\n            >\n              <Download className=\"mr-2\" size={16} />\n              Tüm Cevapları İndir\n            </Button>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            {/* Questions List */}\n            <div className=\"lg:col-span-1\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Sorular</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0\">\n                  {isLoading ? (\n                    <div className=\"p-4 text-center ak-gray\">Yükleniyor...</div>\n                  ) : questions.length === 0 ? (\n                    <div className=\"p-4 text-center ak-gray\">Henüz soru bulunmuyor</div>\n                  ) : (\n                    <div className=\"divide-y\">\n                      {questions.map((question) => {\n                        const answerCount = answers.filter(a => a.questionId === question.id).length;\n                        return (\n                          <button\n                            key={question.id}\n                            onClick={() => setSelectedQuestionId(question.id)}\n                            className={`w-full text-left p-4 hover:bg-gray-50 transition-colors ${\n                              selectedQuestionId === question.id ? 'bg-ak-yellow/10' : ''\n                            }`}\n                          >\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex-1\">\n                                <p className=\"font-medium ak-text line-clamp-2\">{question.text}</p>\n                                <div className=\"flex items-center gap-4 mt-2\">\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    {question.type === 'general' ? 'Genel' : 'Özel'}\n                                  </Badge>\n                                  <span className=\"text-xs ak-gray\">{answerCount} cevap</span>\n                                </div>\n                              </div>\n                              <ChevronRight className=\"w-5 h-5 ak-gray mt-1 flex-shrink-0\" />\n                            </div>\n                          </button>\n                        );\n                      })}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Selected Question Answers */}\n            <div className=\"lg:col-span-2\">\n              {!selectedQuestionId ? (\n                <Card>\n                  <CardContent className=\"p-6\">\n                    <div className=\"text-center ak-gray\">\n                      Cevaplarını görmek için bir soru seçin\n                    </div>\n                  </CardContent>\n                </Card>\n              ) : (\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg mb-2\">Soru</CardTitle>\n                        <p className=\"ak-text\">{selectedQuestion?.text}</p>\n                      </div>\n                      <Button \n                        onClick={() => handleDownloadQuestion(selectedQuestionId, selectedQuestion?.text || '')}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"text-ak-blue hover:text-ak-blue-dark\"\n                      >\n                        <Download className=\"mr-2\" size={14} />\n                        Bu Sorunun Cevaplarını İndir\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    {filteredAnswers.length === 0 ? (\n                      <div className=\"text-center ak-gray py-8\">\n                        Bu soru için henüz cevap verilmemiş\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {filteredAnswers.map((answer, index) => (\n                          <div key={answer.id} className=\"bg-ak-light-gray p-4 rounded-lg\">\n                            <div className=\"flex items-start justify-between mb-2\">\n                              <div>\n                                <h5 className=\"font-medium ak-text\">\n                                  Masa {answer.tableNumber} - {answer.userName || 'Bilinmeyen Kullanıcı'}\n                                </h5>\n                                <p className=\"text-sm ak-gray mt-1\">\n                                  {new Date(answer.createdAt).toLocaleString('tr-TR')}\n                                </p>\n                              </div>\n                              {user?.role === 'moderator' && answer.userId === user.id && (\n                                <div className=\"flex space-x-2\">\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleEdit(answer)}\n                                    className=\"text-ak-blue hover:text-ak-blue-dark\"\n                                  >\n                                    <Edit size={14} />\n                                  </Button>\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleDelete(answer.id)}\n                                    className=\"text-red-600 hover:text-red-800\"\n                                  >\n                                    <Trash2 size={14} />\n                                  </Button>\n                                </div>\n                              )}\n                            </div>\n                            <p className=\"ak-text\">{answer.text}</p>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </main>\n      </div>\n\n      {showAnswerModal && selectedQuestionId && selectedQuestion && (\n        <AnswerModal\n          isOpen={showAnswerModal}\n          onClose={() => {\n            setShowAnswerModal(false);\n            setSelectedAnswer(null);\n          }}\n          answer={selectedAnswer}\n          question={{\n            id: selectedQuestion.id,\n            text: selectedQuestion.text,\n            type: selectedQuestion.type,\n            assignedTables: selectedQuestion.assignedTables,\n            createdBy: selectedQuestion.createdBy,\n            isActive: true,\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":13450},"client/src/pages/splash.tsx":{"content":"import akGenclikGif from \"@assets/akgenclik_1753719296848.gif\";\n\nexport default function SplashScreen() {\n  return (\n    <div className=\"fixed inset-0 bg-white z-50 flex items-center justify-center\">\n      <div className=\"text-center\">\n        <img \n          src={akGenclikGif} \n          alt=\"AK Parti Gençlik Kolları\"\n          className=\"mx-auto\"\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":395},"client/src/pages/tables.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Table as TableIcon, Plus, Trash2, Edit, Users } from \"lucide-react\";\nimport { setAuthHeader } from \"@/lib/auth-utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Table } from \"@shared/schema\";\n\ntype TableWithDetails = Table & {\n  userCount: number;\n  users: Array<{\n    id: string;\n    firstName: string;\n    lastName: string;\n    role: string;\n  }>;\n};\n\nexport default function TablesPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [selectedTable, setSelectedTable] = useState<TableWithDetails | null>(null);\n  const [newTableNumber, setNewTableNumber] = useState(\"\");\n  const [newTableName, setNewTableName] = useState(\"\");\n  const [editTableName, setEditTableName] = useState(\"\");\n  \n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: tables = [], isLoading } = useQuery<TableWithDetails[]>({\n    queryKey: [\"/api/tables\"],\n    queryFn: async () => {\n      const response = await fetch('/api/tables', {\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch tables');\n      return response.json();\n    },\n    enabled: user?.role === 'genelsekreterlik',\n  });\n\n  const createTableMutation = useMutation({\n    mutationFn: async (data: { number: number; name?: string }) => {\n      const response = await fetch(\"/api/tables\", {\n        method: \"POST\",\n        headers: {\n          ...setAuthHeader(),\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Masa oluşturulamadı');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tables\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Masa başarıyla oluşturuldu\",\n      });\n      setShowAddModal(false);\n      setNewTableNumber(\"\");\n      setNewTableName(\"\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTableMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/tables/${id}`, {\n        method: \"DELETE\",\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Masa silinemedi');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tables\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Masa başarıyla silindi\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTableMutation = useMutation({\n    mutationFn: async ({ id, name }: { id: string; name: string }) => {\n      const response = await fetch(`/api/tables/${id}`, {\n        method: \"PUT\",\n        headers: {\n          ...setAuthHeader(),\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ name }),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Masa güncellenemedi');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tables\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Masa başarıyla güncellendi\",\n      });\n      setShowEditModal(false);\n      setSelectedTable(null);\n      setEditTableName(\"\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddTable = () => {\n    const tableNumber = parseInt(newTableNumber);\n    if (isNaN(tableNumber) || tableNumber <= 0) {\n      toast({\n        title: \"Hata\",\n        description: \"Geçerli bir masa numarası giriniz\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createTableMutation.mutate({ \n      number: tableNumber, \n      name: newTableName || undefined \n    });\n  };\n\n  if (user?.role !== 'genelsekreterlik') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <p className=\"text-red-600\">Bu sayfaya erişim yetkiniz yok.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n      \n      <div className=\"lg:ml-64\">\n        <Header title=\"Masa Yönetimi\" onMenuClick={() => setSidebarOpen(true)} />\n        \n        <main className=\"p-4 sm:p-6 lg:p-8\">\n          <div className=\"mb-6 flex justify-between items-center\">\n            <h2 className=\"text-lg font-semibold ak-text\">Masalar</h2>\n            <Button\n              onClick={() => setShowAddModal(true)}\n              className=\"bg-ak-yellow hover:bg-ak-yellow-dark text-white\"\n            >\n              <Plus className=\"mr-2\" size={16} />\n              Masa Ekle\n            </Button>\n          </div>\n\n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <p className=\"ak-gray\">Yükleniyor...</p>\n            </div>\n          ) : tables.length === 0 ? (\n            <Card>\n              <CardContent className=\"py-8 text-center\">\n                <TableIcon className=\"mx-auto mb-4 text-gray-300\" size={48} />\n                <p className=\"ak-gray\">Henüz masa eklenmemiş.</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {tables.map((table) => (\n                <Card key={table.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-lg font-semibold ak-text\">Masa {table.number}</h3>\n                        {table.name && (\n                          <p className=\"text-sm ak-gray mt-1\">{table.name}</p>\n                        )}\n                      </div>\n                      <div className=\"flex gap-1\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => {\n                            setSelectedTable(table);\n                            setEditTableName(table.name || \"\");\n                            setShowEditModal(true);\n                          }}\n                          className=\"text-ak-blue hover:text-ak-blue-dark\"\n                        >\n                          <Edit size={16} />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => deleteTableMutation.mutate(table.id)}\n                          className=\"text-red-600 hover:text-red-700\"\n                        >\n                          <Trash2 size={16} />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <Users className=\"text-ak-gray\" size={16} />\n                        <span className=\"text-sm font-medium ak-text\">{table.userCount} Kullanıcı</span>\n                      </div>\n                      \n                      {table.users && table.users.length > 0 && (\n                        <div className=\"space-y-2\">\n                          <p className=\"text-xs font-medium ak-gray uppercase\">Atanan Kullanıcılar:</p>\n                          <div className=\"space-y-1 max-h-32 overflow-y-auto\">\n                            {table.users.map((user) => (\n                              <div key={user.id} className=\"flex items-center justify-between text-xs\">\n                                <span className=\"ak-text\">{user.firstName} {user.lastName}</span>\n                                <Badge \n                                  className={\n                                    user.role === 'genelsekreterlik' ? 'bg-red-100 text-red-800 text-xs' :\n                                    user.role === 'genelbaskan' ? 'bg-ak-yellow/20 text-ak-yellow text-xs' :\n                                    'bg-ak-blue/20 text-ak-blue text-xs'\n                                  }\n                                >\n                                  {user.role === 'genelsekreterlik' ? 'GS' :\n                                   user.role === 'genelbaskan' ? 'GB' : 'M'}\n                                </Badge>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                      \n                      <p className=\"text-xs ak-gray border-t pt-2\">\n                        Oluşturulma: {new Date(table.createdAt).toLocaleDateString('tr-TR')}\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {/* Add Table Modal */}\n          <Dialog open={showAddModal} onOpenChange={setShowAddModal}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Yeni Masa Ekle</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div>\n                  <Label htmlFor=\"tableNumber\">Masa Numarası *</Label>\n                  <Input\n                    id=\"tableNumber\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={newTableNumber}\n                    onChange={(e) => setNewTableNumber(e.target.value)}\n                    placeholder=\"Örn: 1\"\n                    className=\"mt-1\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"tableName\">Masa Adı (Opsiyonel)</Label>\n                  <Input\n                    id=\"tableName\"\n                    type=\"text\"\n                    value={newTableName}\n                    onChange={(e) => setNewTableName(e.target.value)}\n                    placeholder=\"Örn: Salon A\"\n                    className=\"mt-1\"\n                  />\n                </div>\n              </div>\n              <DialogFooter>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowAddModal(false);\n                    setNewTableNumber(\"\");\n                    setNewTableName(\"\");\n                  }}\n                >\n                  İptal\n                </Button>\n                <Button\n                  onClick={handleAddTable}\n                  disabled={createTableMutation.isPending}\n                  className=\"bg-ak-yellow hover:bg-ak-yellow-dark text-white\"\n                >\n                  {createTableMutation.isPending ? \"Ekleniyor...\" : \"Ekle\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n\n          {/* Edit Table Modal */}\n          <Dialog open={showEditModal} onOpenChange={setShowEditModal}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Masa Düzenle</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div>\n                  <Label htmlFor=\"editTableName\">Masa Adı</Label>\n                  <Input\n                    id=\"editTableName\"\n                    type=\"text\"\n                    value={editTableName}\n                    onChange={(e) => setEditTableName(e.target.value)}\n                    placeholder=\"Örn: Salon A\"\n                    className=\"mt-1\"\n                  />\n                </div>\n                {selectedTable && (\n                  <div className=\"text-sm ak-gray\">\n                    <p>Masa Numarası: <span className=\"font-medium ak-text\">{selectedTable.number}</span></p>\n                    <p>Kullanıcı Sayısı: <span className=\"font-medium ak-text\">{selectedTable.userCount}</span></p>\n                  </div>\n                )}\n              </div>\n              <DialogFooter>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowEditModal(false);\n                    setSelectedTable(null);\n                    setEditTableName(\"\");\n                  }}\n                >\n                  İptal\n                </Button>\n                <Button\n                  onClick={() => {\n                    if (selectedTable && editTableName.trim()) {\n                      updateTableMutation.mutate({\n                        id: selectedTable.id,\n                        name: editTableName.trim(),\n                      });\n                    }\n                  }}\n                  disabled={updateTableMutation.isPending || !editTableName.trim()}\n                  className=\"bg-ak-yellow hover:bg-ak-yellow-dark text-white\"\n                >\n                  {updateTableMutation.isPending ? \"Güncelleniyor...\" : \"Güncelle\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":14482},"client/src/pages/users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useQueryClient, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit, UserX, Download, Upload, AlertTriangle } from \"lucide-react\";\nimport { setAuthHeader } from \"@/lib/auth-utils\";\nimport UserModal from \"@/components/modals/user-modal\";\nimport EditUserModal from \"@/components/modals/edit-user-modal\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport type { UserWithStats } from \"@shared/schema\";\n\nexport default function UsersPage() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterRole, setFilterRole] = useState(\"all\");\n  const [showModal, setShowModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<UserWithStats | null>(null);\n  const [deleteDialog, setDeleteDialog] = useState<{\n    open: boolean;\n    user?: UserWithStats;\n    deleteFeedback?: boolean;\n    deleteAnswers?: boolean;\n  }>({ open: false, deleteFeedback: false, deleteAnswers: false });\n  \n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: users = [], isLoading } = useQuery<UserWithStats[]>({\n    queryKey: [\"/api/users\"],\n    queryFn: async () => {\n      const response = await fetch('/api/users', {\n        headers: setAuthHeader(),\n      });\n      if (!response.ok) throw new Error('Failed to fetch users');\n      return response.json();\n    },\n    enabled: user?.role === 'genelsekreterlik',\n  });\n\n  const filteredUsers = users.filter(userItem => {\n    const fullName = `${userItem.firstName} ${userItem.lastName}`.toLowerCase();\n    const matchesSearch = fullName.includes(searchTerm.toLowerCase()) || \n                         userItem.tcNumber.includes(searchTerm);\n    const matchesFilter = filterRole === \"all\" || userItem.role === filterRole;\n    return matchesSearch && matchesFilter;\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async ({ userId, deleteFeedback, deleteAnswers }: { \n      userId: string; \n      deleteFeedback: boolean; \n      deleteAnswers: boolean;\n    }) => {\n      const params = new URLSearchParams();\n      if (deleteFeedback) params.append('deleteFeedback', 'true');\n      if (deleteAnswers) params.append('deleteAnswers', 'true');\n      \n      const response = await fetch(`/api/users/${userId}?${params.toString()}`, {\n        method: 'DELETE',\n        headers: setAuthHeader(),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Kullanıcı silinemedi');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/tables'] });\n      \n      toast({\n        title: \"Başarılı\",\n        description: \"Kullanıcı başarıyla silindi\",\n      });\n      \n      setDeleteDialog({ open: false, deleteFeedback: false, deleteAnswers: false });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getRoleBadgeProps = (role: string) => {\n    switch (role) {\n      case 'genelsekreterlik':\n        return { className: 'bg-red-100 text-red-800', label: 'Genel Sekreterlik' };\n      case 'genelbaskan':\n        return { className: 'bg-ak-yellow/20 text-ak-yellow', label: 'Genel Başkan' };\n      case 'moderator':\n        return { className: 'bg-ak-blue/20 text-ak-blue', label: 'Moderatör' };\n      default:\n        return { className: 'bg-gray-100 text-gray-800', label: role };\n    }\n  };\n\n  const getStatusBadge = (isActive: boolean, lastLogin?: string | Date | null) => {\n    if (!isActive) {\n      return <Badge className=\"bg-red-100 text-red-800\">Pasif</Badge>;\n    }\n    \n    if (lastLogin) {\n      const lastLoginDate = typeof lastLogin === 'string' ? new Date(lastLogin) : lastLogin;\n      const now = new Date();\n      const diffMinutes = (now.getTime() - lastLoginDate.getTime()) / (1000 * 60);\n      \n      if (diffMinutes < 30) {\n        return <Badge className=\"bg-green-100 text-green-800\">Aktif</Badge>;\n      }\n    }\n    \n    return <Badge className=\"bg-yellow-100 text-yellow-800\">Beklemede</Badge>;\n  };\n\n  const getUserInitials = (firstName: string, lastName: string) => {\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n  };\n\n  if (user?.role !== 'genelsekreterlik') {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <p className=\"ak-text\">Bu sayfaya erişim yetkiniz bulunmamaktadır.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n      \n      <div className=\"lg:ml-64\">\n        <Header title=\"Kullanıcı Yönetimi\" onMenuClick={() => setSidebarOpen(true)} />\n        \n        <main className=\"p-4 sm:p-6 lg:p-8\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold ak-text\">Kullanıcı Yönetimi</h2>\n            <div className=\"flex gap-2\">\n              <Button \n                onClick={() => {\n                  const input = document.createElement('input');\n                  input.type = 'file';\n                  input.accept = '.json';\n                  input.onchange = async (e) => {\n                    const file = (e.target as HTMLInputElement).files?.[0];\n                    if (file) {\n                      try {\n                        const text = await file.text();\n                        const data = JSON.parse(text);\n                        \n                        const formData = new FormData();\n                        formData.append('file', file);\n                        \n                        const response = await fetch('/api/users/import', {\n                          method: 'POST',\n                          headers: setAuthHeader(),\n                          body: formData,\n                        });\n                        \n                        if (!response.ok) {\n                          const error = await response.json();\n                          throw new Error(error.message || 'Import failed');\n                        }\n                        \n                        const result = await response.json();\n                        \n                        queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n                        queryClient.invalidateQueries({ queryKey: ['/api/tables'] });\n                        \n                        toast({\n                          title: \"Başarılı\",\n                          description: `${result.imported} kullanıcı başarıyla içe aktarıldı${result.tablesCreated > 0 ? `, ${result.tablesCreated} masa oluşturuldu` : ''}`,\n                        });\n                      } catch (error) {\n                        toast({\n                          title: \"Hata\",\n                          description: error instanceof Error ? error.message : \"JSON dosyası içe aktarılamadı\",\n                          variant: \"destructive\",\n                        });\n                      }\n                    }\n                  };\n                  input.click();\n                }}\n                variant=\"outline\"\n                className=\"text-green-600 hover:text-green-700\"\n              >\n                <Upload className=\"mr-2\" size={16} />\n                JSON İçe Aktar\n              </Button>\n              <Button \n                onClick={async () => {\n                  try {\n                    const response = await fetch('/api/export/users?format=csv', {\n                      headers: setAuthHeader(),\n                    });\n                    \n                    if (!response.ok) throw new Error('Export failed');\n                    \n                    const blob = await response.blob();\n                    const url = window.URL.createObjectURL(blob);\n                    const a = document.createElement('a');\n                    a.href = url;\n                    a.download = `kullanicilar_${new Date().toLocaleDateString('tr-TR').replace(/\\./g, '-')}.csv`;\n                    document.body.appendChild(a);\n                    a.click();\n                    window.URL.revokeObjectURL(url);\n                    document.body.removeChild(a);\n                    \n                    toast({\n                      title: \"Başarılı\",\n                      description: \"Kullanıcı listesi CSV olarak indirildi\",\n                    });\n                  } catch (error) {\n                    toast({\n                      title: \"Hata\",\n                      description: \"CSV dosyası indirilemedi\",\n                      variant: \"destructive\",\n                    });\n                  }\n                }}\n                variant=\"outline\"\n                className=\"text-ak-blue hover:text-ak-blue-dark\"\n              >\n                <Download className=\"mr-2\" size={16} />\n                CSV İndir\n              </Button>\n              <Button \n                onClick={() => setShowModal(true)} \n                className=\"bg-ak-yellow hover:bg-ak-yellow-dark text-white\"\n              >\n                <Plus className=\"mr-2\" size={16} />\n                Yeni Kullanıcı Ekle\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"ak-text\">Kullanıcı Rolleri</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm ak-text\">Genel Sekreterlik</span>\n                    <span className=\"px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full\">\n                      {users.filter(u => u.role === 'genelsekreterlik').length}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm ak-text\">Genel Başkan</span>\n                    <span className=\"px-2 py-1 bg-ak-yellow/20 text-ak-yellow text-xs rounded-full\">\n                      {users.filter(u => u.role === 'genelbaskan').length}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm ak-text\">Moderatör</span>\n                    <span className=\"px-2 py-1 bg-ak-blue/20 text-ak-blue text-xs rounded-full\">\n                      {users.filter(u => u.role === 'moderator').length}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"ak-text\">Aktif Kullanıcılar</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                    {users.filter(u => u.isActive).length}\n                  </div>\n                  <p className=\"text-sm ak-gray\">Kayıtlı kullanıcı</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"ak-text\">Toplam Cevap</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold ak-blue mb-2\">\n                    {users.reduce((sum, u) => sum + (u.answersCount || 0), 0)}\n                  </div>\n                  <p className=\"text-sm ak-gray\">Tüm kullanıcılar</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0\">\n                <div className=\"flex space-x-4\">\n                  <Select value={filterRole} onValueChange={setFilterRole}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue placeholder=\"Rol seçin\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Tüm Roller</SelectItem>\n                      <SelectItem value=\"genelsekreterlik\">Genel Sekreterlik</SelectItem>\n                      <SelectItem value=\"genelbaskan\">Genel Başkan</SelectItem>\n                      <SelectItem value=\"moderator\">Moderatör</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Kullanıcı ara...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"w-64\"\n                  />\n                </div>\n              </div>\n            </CardHeader>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              {isLoading ? (\n                <div className=\"p-6 text-center ak-gray\">Yükleniyor...</div>\n              ) : filteredUsers.length === 0 ? (\n                <div className=\"p-6 text-center ak-gray\">Kullanıcı bulunamadı</div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-ak-light-gray\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          Kullanıcı\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          T.C. Kimlik No\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          Rol\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          Masa No\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          Son Giriş\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          Durum\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium ak-gray uppercase tracking-wider\">\n                          İşlemler\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {filteredUsers.map((userItem) => {\n                        const roleBadge = getRoleBadgeProps(userItem.role);\n                        return (\n                          <tr key={userItem.id}>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"flex items-center\">\n                                <div className=\"w-8 h-8 bg-ak-yellow rounded-full flex items-center justify-center mr-3\">\n                                  <span className=\"text-white text-xs font-semibold\">\n                                    {getUserInitials(userItem.firstName, userItem.lastName)}\n                                  </span>\n                                </div>\n                                <div>\n                                  <div className=\"text-sm font-medium ak-text\">\n                                    {userItem.firstName} {userItem.lastName}\n                                  </div>\n                                </div>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm ak-gray\">\n                              {userItem.tcNumber}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <Badge className={roleBadge.className}>\n                                {roleBadge.label}\n                              </Badge>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm ak-text font-medium\">\n                              {userItem.tableNumber ? `Masa ${userItem.tableNumber}` : '-'}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm ak-gray\">\n                              {userItem.lastLogin \n                                ? new Date(userItem.lastLogin).toLocaleString('tr-TR')\n                                : 'Hiç giriş yapmadı'\n                              }\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              {getStatusBadge(userItem.isActive, userItem.lastLogin)}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"text-ak-blue hover:text-ak-blue-dark\"\n                                onClick={() => {\n                                  setSelectedUser(userItem);\n                                  setShowEditModal(true);\n                                }}\n                              >\n                                <Edit size={16} />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"text-red-600 hover:text-red-800\"\n                                onClick={() => setDeleteDialog({ \n                                  open: true, \n                                  user: userItem,\n                                  deleteFeedback: false,\n                                  deleteAnswers: false\n                                })}\n                              >\n                                <UserX size={16} />\n                              </Button>\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      <UserModal\n        isOpen={showModal}\n        onClose={() => setShowModal(false)}\n      />\n      \n      <EditUserModal\n        isOpen={showEditModal}\n        onClose={() => {\n          setShowEditModal(false);\n          setSelectedUser(null);\n        }}\n        user={selectedUser}\n      />\n\n      <AlertDialog open={deleteDialog.open} onOpenChange={(open) => setDeleteDialog({ ...deleteDialog, open })}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"text-red-500\" size={20} />\n              Kullanıcı Silme Onayı\n            </AlertDialogTitle>\n            <AlertDialogDescription asChild>\n              <div className=\"space-y-4\">\n                <p>\n                  <strong>{deleteDialog.user?.firstName} {deleteDialog.user?.lastName}</strong> kullanıcısını silmek üzeresiniz.\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Bu işlem geri alınamaz. Aşağıdaki seçenekleri de işaretleyebilirsiniz:\n                </p>\n                \n                <div className=\"space-y-3 p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox \n                      id=\"deleteFeedback\"\n                      checked={deleteDialog.deleteFeedback}\n                      onCheckedChange={(checked) => \n                        setDeleteDialog({ ...deleteDialog, deleteFeedback: checked as boolean })\n                      }\n                    />\n                    <label \n                      htmlFor=\"deleteFeedback\" \n                      className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                    >\n                      Bu kullanıcıya ait geri bildirimleri sil\n                    </label>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox \n                      id=\"deleteAnswers\"\n                      checked={deleteDialog.deleteAnswers}\n                      onCheckedChange={(checked) => \n                        setDeleteDialog({ ...deleteDialog, deleteAnswers: checked as boolean })\n                      }\n                    />\n                    <label \n                      htmlFor=\"deleteAnswers\" \n                      className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                    >\n                      Bu kullanıcıya ait cevapları sil\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={() => setDeleteDialog({ open: false, deleteFeedback: false, deleteAnswers: false })}>\n              İptal\n            </AlertDialogCancel>\n            <AlertDialogAction\n              className=\"bg-red-600 hover:bg-red-700\"\n              onClick={() => {\n                if (deleteDialog.user) {\n                  deleteUserMutation.mutate({\n                    userId: deleteDialog.user.id,\n                    deleteFeedback: deleteDialog.deleteFeedback || false,\n                    deleteAnswers: deleteDialog.deleteAnswers || false,\n                  });\n                }\n              }}\n            >\n              Kullanıcıyı Sil\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":23589},"client/src/components/layout/header.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Menu } from \"lucide-react\";\n\ninterface HeaderProps {\n  title: string;\n  onMenuClick: () => void;\n}\n\nexport default function Header({ title, onMenuClick }: HeaderProps) {\n  const { user } = useAuth();\n\n  const getUserInitials = (firstName: string, lastName: string) => {\n    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n  };\n\n  const getRoleLabel = (role: string, tableNumber?: number) => {\n    const roleLabels = {\n      genelsekreterlik: 'Genel Sekreterlik',\n      genelbaskan: 'Genel Başkan',\n      moderator: tableNumber ? `Moderatör - Masa ${tableNumber}` : 'Moderatör'\n    };\n    return roleLabels[role as keyof typeof roleLabels] || role;\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200\">\n      <div className=\"px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"lg:hidden -ml-2 p-2 ak-gray hover:ak-text hover:bg-gray-100\"\n              onClick={onMenuClick}\n            >\n              <Menu size={20} />\n            </Button>\n            <h1 className=\"ml-2 text-xl font-semibold ak-text\">{title}</h1>\n          </div>\n          \n          {user && (\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-right\">\n                <p className=\"text-sm font-medium ak-text\">\n                  {user.firstName} {user.lastName}\n                </p>\n                <p className=\"text-xs ak-gray\">\n                  {getRoleLabel(user.role, user.tableNumber)}\n                </p>\n              </div>\n              <div className=\"w-8 h-8 bg-ak-yellow rounded-full flex items-center justify-center\">\n                <span className=\"text-white font-semibold text-sm\">\n                  {getUserInitials(user.firstName, user.lastName)}\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2150},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  LayoutDashboard,\n  HelpCircle,\n  Users,\n  BarChart3,\n  MessageSquare,\n  History,\n  MessageCircle,\n  LogOut,\n} from \"lucide-react\";\nimport akPartiLogo from \"@assets/akpartilogo_1753719301210.png\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function Sidebar({ isOpen, onClose }: SidebarProps) {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n\n  const navigationItems = {\n    genelsekreterlik: [\n      { path: \"/\", label: \"Ana Panel\", icon: LayoutDashboard },\n      { path: \"/questions\", label: \"Soru Yönetimi\", icon: HelpCircle },\n      { path: \"/tables\", label: \"Masa Yönetimi\", icon: Users },\n      { path: \"/users\", label: \"Kullanıcı Yönetimi\", icon: Users },\n      { path: \"/responses\", label: \"Cevaplar\", icon: MessageCircle },\n      { path: \"/reports\", label: \"Raporlar\", icon: BarChart3 },\n      { path: \"/feedback\", label: \"Geri Bildirimler\", icon: MessageSquare },\n      { path: \"/logs\", label: \"Sistem Logları\", icon: History },\n    ],\n    genelbaskan: [\n      { path: \"/\", label: \"Ana Panel\", icon: LayoutDashboard },\n      { path: \"/responses\", label: \"Cevaplar\", icon: MessageCircle },\n      { path: \"/reports\", label: \"Raporlar\", icon: BarChart3 },\n      { path: \"/logs\", label: \"Sistem Logları\", icon: History },\n    ],\n    moderator: [\n      { path: \"/\", label: \"Ana Panel\", icon: LayoutDashboard },\n      { path: \"/questions\", label: \"Sorularım\", icon: HelpCircle },\n      { path: \"/responses\", label: \"Cevaplarım\", icon: MessageCircle },\n    ],\n  };\n\n  const items = user ? navigationItems[user.role] || [] : [];\n\n  return (\n    <>\n      {/* Overlay for mobile */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden\"\n          onClick={onClose}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div \n        className={cn(\n          \"fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg transform transition-transform duration-200 ease-in-out\",\n          isOpen ? \"translate-x-0\" : \"-translate-x-full\",\n          \"lg:translate-x-0\"\n        )}\n      >\n        <div className=\"flex flex-col items-center justify-center h-auto p-4 bg-white border-b\">\n          <img \n            src={akPartiLogo} \n            alt=\"AK Parti\" \n            className=\"w-16 h-16 mb-2 object-contain\"\n          />\n          <h1 className=\"text-center ak-text font-bold text-sm\">İrade, İstikamet ve İstişare Kampı</h1>\n          <p className=\"text-xs ak-gray mt-1\">AK Parti Gençlik Kolları</p>\n        </div>\n        \n        <nav className=\"mt-8\">\n          <div className=\"px-4 mb-4\">\n            <p className=\"text-xs font-semibold ak-gray uppercase tracking-wider\">Menü</p>\n          </div>\n          \n          <div className=\"space-y-2 px-4\">\n            {items.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.path;\n              \n              return (\n                <Link key={item.path} href={item.path}>\n                  <Button\n                    variant=\"ghost\"\n                    className={cn(\n                      \"w-full justify-start\",\n                      isActive \n                        ? \"bg-ak-yellow text-white hover:bg-ak-yellow-dark\" \n                        : \"ak-text hover:bg-ak-light-gray\"\n                    )}\n                    onClick={() => onClose()}\n                  >\n                    <Icon className=\"mr-3\" size={16} />\n                    {item.label}\n                  </Button>\n                </Link>\n              );\n            })}\n          </div>\n        </nav>\n        \n        <div className=\"absolute bottom-0 w-full p-4 border-t\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => logout()}\n            className=\"w-full justify-start text-red-600 hover:bg-red-50\"\n          >\n            <LogOut className=\"mr-2\" size={16} />\n            Güvenli Çıkış\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":4183},"client/src/components/modals/answer-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { setAuthHeader } from \"@/lib/auth-utils\";\nimport type { QuestionWithStats, AnswerWithDetails } from \"@shared/schema\";\n\ninterface AnswerModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  question?: QuestionWithStats | null;\n  answer?: AnswerWithDetails | null;\n}\n\nexport default function AnswerModal({ isOpen, onClose, question, answer }: AnswerModalProps) {\n  const [text, setText] = useState(\"\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (answer) {\n      setText(answer.text);\n    } else {\n      setText(\"\");\n    }\n  }, [answer]);\n\n  const createAnswerMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/answers', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...setAuthHeader(),\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create answer');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/answers/my\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Cevap başarıyla eklendi\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Cevap eklenemedi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateAnswerMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(`/api/answers/${answer!.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          ...setAuthHeader(),\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to update answer');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/answers/my\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Cevap başarıyla güncellendi\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Cevap güncellenemedi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!text.trim()) {\n      toast({\n        title: \"Hata\",\n        description: \"Cevap metni gereklidir\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!question) {\n      toast({\n        title: \"Hata\",\n        description: \"Soru bilgisi bulunamadı\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data = {\n      questionId: question.id,\n      text: text.trim(),\n      orderIndex: answer?.orderIndex || 1,\n    };\n\n    if (answer) {\n      updateAnswerMutation.mutate(data);\n    } else {\n      createAnswerMutation.mutate(data);\n    }\n  };\n\n  const handleClose = () => {\n    setText(\"\");\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"ak-text\">\n            {answer ? 'Cevap Düzenle' : 'Cevap Ekle'}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"mb-4 p-4 bg-ak-light-gray rounded-lg\">\n          <h4 className=\"font-medium ak-text mb-2\">Soru:</h4>\n          <p className=\"ak-gray\">{question?.text || 'Soru metni yüklenemedi'}</p>\n        </div>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label className=\"ak-text font-medium\">Cevabınız</Label>\n            <Textarea\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n              rows={6}\n              className=\"mt-2 focus:ring-ak-yellow focus:border-ak-yellow\"\n              placeholder=\"Cevabınızı detaylı şekilde yazınız...\"\n              required\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-3\">\n            <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n              İptal\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"bg-ak-yellow hover:bg-ak-yellow-dark text-white\"\n              disabled={createAnswerMutation.isPending || updateAnswerMutation.isPending}\n            >\n              {answer ? 'Güncelle' : 'Cevap Kaydet'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5069},"client/src/components/modals/edit-user-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { setAuthHeader } from \"@/lib/auth-utils\";\nimport type { User } from \"@shared/schema\";\n\ninterface EditUserModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  user: User | null;\n}\n\nexport default function EditUserModal({ isOpen, onClose, user }: EditUserModalProps) {\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [tcNumber, setTcNumber] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [role, setRole] = useState<\"moderator\" | \"genelbaskan\" | \"genelsekreterlik\">(\"moderator\");\n  const [tableNumber, setTableNumber] = useState(\"\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (user) {\n      setFirstName(user.firstName);\n      setLastName(user.lastName);\n      setTcNumber(user.tcNumber);\n      setRole(user.role);\n      setTableNumber(user.tableNumber?.toString() || \"\");\n      setPassword(\"\"); // Always clear password field\n    }\n  }, [user]);\n\n  const updateUserMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(`/api/users/${user?.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          ...setAuthHeader(),\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || 'Failed to update user');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Kullanıcı başarıyla güncellendi\",\n      });\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"Kullanıcı güncellenemedi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!firstName.trim() || !lastName.trim() || !tcNumber.trim()) {\n      toast({\n        title: \"Hata\",\n        description: \"Lütfen tüm zorunlu alanları doldurun\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data: any = {\n      firstName: firstName.trim(),\n      lastName: lastName.trim(),\n      tcNumber: tcNumber.trim(),\n      role,\n    };\n\n    // Only include password if provided\n    if (password.trim()) {\n      data.password = password.trim();\n    }\n\n    // Only include tableNumber for moderators\n    if (role === 'moderator' && tableNumber) {\n      data.tableNumber = parseInt(tableNumber);\n    } else {\n      data.tableNumber = null;\n    }\n\n    updateUserMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Kullanıcı Düzenle</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"firstName\">Ad</Label>\n              <Input\n                id=\"firstName\"\n                value={firstName}\n                onChange={(e) => setFirstName(e.target.value)}\n                placeholder=\"Ad\"\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"lastName\">Soyad</Label>\n              <Input\n                id=\"lastName\"\n                value={lastName}\n                onChange={(e) => setLastName(e.target.value)}\n                placeholder=\"Soyad\"\n                required\n              />\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"tcNumber\">TC Kimlik No</Label>\n            <Input\n              id=\"tcNumber\"\n              value={tcNumber}\n              onChange={(e) => setTcNumber(e.target.value)}\n              placeholder=\"TC Kimlik No\"\n              maxLength={11}\n              required\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"password\">Şifre (Boş bırakılırsa değişmez)</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Yeni şifre\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"role\">Rol</Label>\n            <Select value={role} onValueChange={(value: any) => setRole(value)}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"moderator\">Moderatör</SelectItem>\n                <SelectItem value=\"genelbaskan\">Genel Başkan</SelectItem>\n                <SelectItem value=\"genelsekreterlik\">Genel Sekreterlik</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          {role === 'moderator' && (\n            <div>\n              <Label htmlFor=\"tableNumber\">Masa Numarası</Label>\n              <Input\n                id=\"tableNumber\"\n                type=\"number\"\n                value={tableNumber}\n                onChange={(e) => setTableNumber(e.target.value)}\n                placeholder=\"Masa numarası\"\n                min=\"1\"\n              />\n            </div>\n          )}\n          \n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              İptal\n            </Button>\n            <Button type=\"submit\" disabled={updateUserMutation.isPending}>\n              {updateUserMutation.isPending ? \"Güncelleniyor...\" : \"Güncelle\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6350},"client/src/components/modals/question-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { setAuthHeader } from \"@/lib/auth-utils\";\nimport type { QuestionWithStats } from \"@shared/schema\";\n\ninterface QuestionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  question?: QuestionWithStats | null;\n}\n\nexport default function QuestionModal({ isOpen, onClose, question }: QuestionModalProps) {\n  const [text, setText] = useState(\"\");\n  const [type, setType] = useState<\"general\" | \"specific\">(\"general\");\n  const [assignedTables, setAssignedTables] = useState<number[]>([]);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Sample table numbers - in real app, this would come from API\n  const tableNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\n  useEffect(() => {\n    if (question) {\n      setText(question.text);\n      setType(question.type);\n      setAssignedTables(question.assignedTables as number[] || []);\n    } else {\n      setText(\"\");\n      setType(\"general\");\n      setAssignedTables([]);\n    }\n  }, [question]);\n\n  const createQuestionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/questions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...setAuthHeader(),\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create question');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Soru başarıyla oluşturuldu\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Soru oluşturulamadı\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateQuestionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(`/api/questions/${question!.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          ...setAuthHeader(),\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to update question');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Soru başarıyla güncellendi\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Soru güncellenemedi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!text.trim()) {\n      toast({\n        title: \"Hata\",\n        description: \"Soru metni gereklidir\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (type === \"specific\" && assignedTables.length === 0) {\n      toast({\n        title: \"Hata\",\n        description: \"Özel soru için en az bir masa seçmelisiniz\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data = {\n      text,\n      type,\n      assignedTables: type === \"specific\" ? assignedTables : null,\n    };\n\n    if (question) {\n      updateQuestionMutation.mutate(data);\n    } else {\n      createQuestionMutation.mutate(data);\n    }\n  };\n\n  const handleTableChange = (tableNumber: number, checked: boolean) => {\n    if (checked) {\n      setAssignedTables(prev => [...prev, tableNumber]);\n    } else {\n      setAssignedTables(prev => prev.filter(t => t !== tableNumber));\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"ak-text\">\n            {question ? 'Soru Düzenle' : 'Yeni Soru Ekle'}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <Label className=\"ak-text font-medium\">Soru Metni</Label>\n            <Textarea\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n              rows={4}\n              className=\"mt-2 focus:ring-ak-yellow focus:border-ak-yellow\"\n              placeholder=\"Soru metnini giriniz...\"\n              required\n            />\n          </div>\n          \n          <div>\n            <Label className=\"ak-text font-medium\">Soru Türü</Label>\n            <RadioGroup value={type} onValueChange={(value: \"general\" | \"specific\") => setType(value)}>\n              <div className=\"flex items-center space-x-2 mt-2\">\n                <RadioGroupItem value=\"general\" id=\"general\" />\n                <Label htmlFor=\"general\" className=\"ak-text\">Genel (Tüm masalara açık)</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <RadioGroupItem value=\"specific\" id=\"specific\" />\n                <Label htmlFor=\"specific\" className=\"ak-text\">Özel (Belirli masalara)</Label>\n              </div>\n            </RadioGroup>\n          </div>\n          \n          {type === \"specific\" && (\n            <div>\n              <Label className=\"ak-text font-medium\">Masa Seçimi</Label>\n              <div className=\"grid grid-cols-3 gap-2 mt-2\">\n                {tableNumbers.map((tableNumber) => (\n                  <div key={tableNumber} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={`table-${tableNumber}`}\n                      checked={assignedTables.includes(tableNumber)}\n                      onCheckedChange={(checked) => handleTableChange(tableNumber, checked as boolean)}\n                    />\n                    <Label htmlFor={`table-${tableNumber}`} className=\"ak-text\">\n                      Masa {tableNumber}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n          \n          <div className=\"flex justify-end space-x-3\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              İptal\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"bg-ak-yellow hover:bg-ak-yellow-dark text-white\"\n              disabled={createQuestionMutation.isPending || updateQuestionMutation.isPending}\n            >\n              {question ? 'Güncelle' : 'Soru Ekle'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7068},"client/src/components/modals/user-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { setAuthHeader } from \"@/lib/auth-utils\";\n\ninterface UserModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function UserModal({ isOpen, onClose }: UserModalProps) {\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [tcNumber, setTcNumber] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [role, setRole] = useState<\"moderator\" | \"genelbaskan\" | \"genelsekreterlik\">(\"moderator\");\n  const [tableNumber, setTableNumber] = useState(\"\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...setAuthHeader(),\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || 'Failed to create user');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Kullanıcı başarıyla oluşturuldu\",\n      });\n      resetForm();\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"Kullanıcı oluşturulamadı\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFirstName(\"\");\n    setLastName(\"\");\n    setTcNumber(\"\");\n    setPassword(\"\");\n    setRole(\"moderator\");\n    setTableNumber(\"\");\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!firstName.trim() || !lastName.trim() || !tcNumber.trim() || !password.trim()) {\n      toast({\n        title: \"Hata\",\n        description: \"Tüm alanlar gereklidir\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (tcNumber.length !== 11) {\n      toast({\n        title: \"Hata\",\n        description: \"T.C. Kimlik Numarası 11 haneli olmalıdır\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (role === \"moderator\" && !tableNumber) {\n      toast({\n        title: \"Hata\",\n        description: \"Moderatör için masa numarası gereklidir\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const data = {\n      firstName,\n      lastName,\n      tcNumber,\n      password,\n      role,\n      tableNumber: role === \"moderator\" ? parseInt(tableNumber) : null,\n      isActive: true,\n    };\n\n    createUserMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    resetForm();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"ak-text\">Yeni Kullanıcı Ekle</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label className=\"ak-text font-medium\">İsim</Label>\n            <Input\n              value={firstName}\n              onChange={(e) => setFirstName(e.target.value)}\n              className=\"mt-2 focus:ring-ak-yellow focus:border-ak-yellow\"\n              required\n            />\n          </div>\n          \n          <div>\n            <Label className=\"ak-text font-medium\">Soyisim</Label>\n            <Input\n              value={lastName}\n              onChange={(e) => setLastName(e.target.value)}\n              className=\"mt-2 focus:ring-ak-yellow focus:border-ak-yellow\"\n              required\n            />\n          </div>\n          \n          <div>\n            <Label className=\"ak-text font-medium\">T.C. Kimlik Numarası</Label>\n            <Input\n              type=\"text\"\n              maxLength={11}\n              value={tcNumber}\n              onChange={(e) => setTcNumber(e.target.value.replace(/\\D/g, ''))}\n              className=\"mt-2 focus:ring-ak-yellow focus:border-ak-yellow\"\n              required\n            />\n          </div>\n          \n          <div>\n            <Label className=\"ak-text font-medium\">Şifre</Label>\n            <Input\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              className=\"mt-2 focus:ring-ak-yellow focus:border-ak-yellow\"\n              required\n            />\n          </div>\n          \n          <div>\n            <Label className=\"ak-text font-medium\">Rol</Label>\n            <Select value={role} onValueChange={(value: \"moderator\" | \"genelbaskan\" | \"genelsekreterlik\") => setRole(value)}>\n              <SelectTrigger className=\"mt-2 focus:ring-ak-yellow focus:border-ak-yellow\">\n                <SelectValue placeholder=\"Rol seçin\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"moderator\">Moderatör</SelectItem>\n                <SelectItem value=\"genelbaskan\">Genel Başkan</SelectItem>\n                <SelectItem value=\"genelsekreterlik\">Genel Sekreterlik</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          {role === \"moderator\" && (\n            <div>\n              <Label className=\"ak-text font-medium\">Masa Numarası</Label>\n              <Input\n                type=\"number\"\n                min=\"1\"\n                value={tableNumber}\n                onChange={(e) => setTableNumber(e.target.value)}\n                className=\"mt-2 focus:ring-ak-yellow focus:border-ak-yellow\"\n                placeholder=\"1-12 arası bir numara\"\n                required\n              />\n            </div>\n          )}\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n              İptal\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"bg-ak-yellow hover:bg-ak-yellow-dark text-white\"\n              disabled={createUserMutation.isPending}\n            >\n              {createUserMutation.isPending ? 'Oluşturuluyor...' : 'Kullanıcı Ekle'}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6804},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}